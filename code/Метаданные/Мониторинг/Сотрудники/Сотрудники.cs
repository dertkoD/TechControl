using System;
using System.Collections.Generic;
using System.Text;
using NsgSoft.DataObjects;
using NsgSoft.Database;
using System.IO;
using NsgSoft.Common;
using TechControl.Метаданные.Учет;
using TechControl.Метаданные._SystemTables;
using TechControl.Метаданные.УчетСпецодеждыИСИЗ;
using System.Linq;

namespace TechControl.Метаданные.Мониторинг
{
    
    public partial class Сотрудники
    {
        protected override List<Guid> BasePost()
        {
            //if (ТаблицаРазмеров.Count > 0)
            //{
            //    Размеры размер = Размеры.Новый();
            //    var cmp = new NsgCompare();
            //    cmp.Add(МониторингСотрудникиТаблицаРазмеров.Names.Размер, размер);
            //    var row = ТаблицаРазмеров.FindRow(cmp);
            //    if (row != null)
            //    {
            //        throw new Exception($"Не заполнен размер {row.ВидСвойствНоменклатуры}");
            //    }
            //}

            ЗаполнитьТаблицуРазмеров();

            if (ДокументКонтроляСпецодежды.Selected)
            {
                foreach (var item in ДокументКонтроляСпецодежды.Таблица.AllRows)
                {
                    var вид = item.НоменклатураСпецодеждыИСИЗ.ВидНоменклатуры;
                    var видРазмернойСетки = item.НоменклатураСпецодеждыИСИЗ.ВидРазмернойСетки;
                    var cmp = new NsgCompare();
                    cmp.Add(МониторингСотрудникиТаблицаРазмеров.Names.ВидСвойствНоменклатуры, вид);
                    cmp.Add(МониторингСотрудникиТаблицаРазмеров.Names.ВидРазмернойСетки, видРазмернойСетки);
                    cmp.Add(МониторингСотрудникиТаблицаРазмеров.Names.Размер, item.Размер);
                    var строкаТаблицыРазмеров = ТаблицаРазмеров.FindRow(cmp);
                    if (строкаТаблицыРазмеров != null)
                    {
                        строкаТаблицыРазмеров.Размер = item.Размер;
                        строкаТаблицыРазмеров.Post();
                    }
                    else
                    {
                        строкаТаблицыРазмеров = ТаблицаРазмеров.NewRow();
                        строкаТаблицыРазмеров.Размер = item.Размер;
                        строкаТаблицыРазмеров.ВидСвойствНоменклатуры = вид;
                        строкаТаблицыРазмеров.ВидРазмернойСетки = видРазмернойСетки;
                        строкаТаблицыРазмеров.Post();
                    }
                }

                ДокументКонтроляСпецодежды = ПеремещениеСпецодежды.Новый();
            }
            return base.BasePost();
        }

        public Размеры РазмерНоменклатуры(Номенклатура номенклатура) 
        {
            Размеры размер = Размеры.Новый();
            if (ТаблицаРазмеров.Count > 0)
            {
                var cmp = new NsgCompare();
                cmp.Add(МониторингСотрудникиТаблицаРазмеров.Names.ВидСвойствНоменклатуры, номенклатура.ВидНоменклатуры);
                var row = ТаблицаРазмеров.FindRow(cmp);
                if (row != null)
                {
                    размер = row.Размер;
                }
            }
            return размер;
        }

        public Мерки ПолучитьМерку(bool дляРедактирования = false, bool запостить = false) 
        {
            var cmp = new NsgCompare();
            cmp.Add(Мерки.Names.Владелец, this);
            var мерка = Мерки.Новый();
            if (!мерка.Find(cmp))
            {
                мерка.New();
                мерка.Владелец = this;
                if (запостить)
                {
                    мерка.Post();
                }
            }
            else
            {
                if (дляРедактирования)
                {
                    мерка.Edit();
                }
            }

            return мерка;
        }

        public Размеры ПолучитьРазмер(Номенклатура номенклатураОдежды, ВидыРазмернойСетки видРазмернойСетки = null, ВидСвойствНоменклатуры видНоменклатуры = null) 
        {
            var мерка = ПолучитьМерку();

            var cmp = new NsgCompare();

            var размер = Размеры.Новый();

            if (!номенклатураОдежды.ВидРазмернойСетки.Selected && видРазмернойСетки == null)
            {
                NsgSettings.MainForm.ShowMessage($"В номенклатуре не задан вид размернойй сетки. Поиск отменен",System.Windows.Forms.MessageBoxIcon.Warning);
                return размер;
            }

            if (!номенклатураОдежды.ВидНоменклатуры.Selected && видНоменклатуры == null)
            {
                NsgSettings.MainForm.ShowMessage($"В номенклатуре не задан вид. Поиск отменен", System.Windows.Forms.MessageBoxIcon.Warning);
                return размер;
            }

            if (видРазмернойСетки == null)
            {
                видРазмернойСетки = номенклатураОдежды.ВидРазмернойСетки;
            }

            if (видНоменклатуры == null)
            {
                видНоменклатуры = номенклатураОдежды.ВидНоменклатуры;
            }

            cmp.Add(Размеры.Names.ВидРазмернойСетки, видРазмернойСетки);
            cmp.Add(Размеры.Names.ВидСвойствНоменклатуры, видНоменклатуры);
            cmp.Add(Размеры.Names.СостояниеДокумента, Сервис.СостоянияОбъекта.Удален, NsgComparison.NotEqual);

            //var cmpOr = new NsgCompare(NsgLogicalOperator.Or);

            //var cmpБоковаяДлинаБрюк = new NsgCompare();
            //cmpБоковаяДлинаБрюк.Add(Размеры.Names.БоковаяДлинаБрюкМин, мерка.БоковаяДлинаБрюк, NsgComparison.LessOrEqual);
            //cmpБоковаяДлинаБрюк.Add(Размеры.Names.БоковаяДлинаБрюкМакс, мерка.БоковаяДлинаБрюк, NsgComparison.Greater);
            //cmpOr.Add(cmpБоковаяДлинаБрюк);

            //var cmpВнутренняяДлинаБрюк = new NsgCompare();
            //cmpВнутренняяДлинаБрюк.Add(Размеры.Names.ВнутренняяДлинаБрюкМин, мерка.ДлинаБрюкПоВнутреннемуШву, NsgComparison.LessOrEqual);
            //cmpВнутренняяДлинаБрюк.Add(Размеры.Names.ВнутренняяДлинаБрюкМакс, мерка.ДлинаБрюкПоВнутреннемуШву, NsgComparison.Greater);
            //cmpOr.Add(cmpВнутренняяДлинаБрюк);

            //var cmpДлинаРукава = new NsgCompare();
            //cmpДлинаРукава.Add(Размеры.Names.ДлинаРукаваМин, мерка.ДлинаРукава, NsgComparison.LessOrEqual);
            //cmpДлинаРукава.Add(Размеры.Names.ДлинаРукаваМакс, мерка.ДлинаРукава, NsgComparison.Greater);
            //cmpOr.Add(cmpДлинаРукава);

            //var cmpДлинаСтупни = new NsgCompare();
            //cmpДлинаСтупни.Add(Размеры.Names.ДлинаСтупниМин, мерка.ДлинаСтопы, NsgComparison.LessOrEqual);
            //cmpДлинаСтупни.Add(Размеры.Names.ДлинаСтупниМакс, мерка.ДлинаСтопы, NsgComparison.Greater);
            //cmpOr.Add(cmpДлинаСтупни);

            //var cmpОбхватБедер = new NsgCompare();
            //cmpОбхватБедер.Add(Размеры.Names.ОбхватБедерМин, мерка.ОбхватБедер, NsgComparison.LessOrEqual);
            //cmpОбхватБедер.Add(Размеры.Names.ОбхватБедерМакс, мерка.ОбхватБедер, NsgComparison.Greater);
            //cmpOr.Add(cmpОбхватБедер);

            //var cmpОбхватГруди = new NsgCompare();
            //cmpОбхватГруди.Add(Размеры.Names.ОбхватГрудиМин, мерка.ОбхватГруди, NsgComparison.LessOrEqual);
            //cmpОбхватГруди.Add(Размеры.Names.ОбхватГрудиМакс, мерка.ОбхватГруди, NsgComparison.Greater);
            //cmpOr.Add(cmpОбхватГруди);

            //var cmpОбхватТалии = new NsgCompare();
            //cmpОбхватТалии.Add(Размеры.Names.ОбхватТалииМин, мерка.ОбхватТалии, NsgComparison.LessOrEqual);
            //cmpОбхватТалии.Add(Размеры.Names.ОбхватТалииМакс, мерка.ОбхватТалии, NsgComparison.Greater);
            //cmpOr.Add(cmpОбхватТалии);

            //var cmpОбхватШеи = new NsgCompare();
            //cmpОбхватШеи.Add(Размеры.Names.ОбхватШеиМин, мерка.ОбхватШеи, NsgComparison.LessOrEqual);
            //cmpОбхватШеи.Add(Размеры.Names.ОбхватШеиМакс, мерка.ОбхватШеи, NsgComparison.Greater);
            //cmpOr.Add(cmpОбхватШеи);

            //var cmpОбхватГоловы = new NsgCompare();
            //cmpОбхватГоловы.Add(Размеры.Names.ОбхватГоловыМин, мерка.ОбхватГоловы, NsgComparison.LessOrEqual);
            //cmpОбхватГоловы.Add(Размеры.Names.ОбхватГоловыМакс, мерка.ОбхватГоловы, NsgComparison.Greater);
            //cmpOr.Add(cmpОбхватГоловы);

            //var cmpРост = new NsgCompare();
            //cmpРост.Add(Размеры.Names.РостМин, мерка.Рост, NsgComparison.LessOrEqual);
            //cmpРост.Add(Размеры.Names.РостМакс, мерка.Рост, NsgComparison.Greater);
            //cmpOr.Add(cmpРост);

            //cmp.Add(cmpOr);

            var всеРазмеры = Размеры.Новый().FindAll(cmp);

            var подходящиеРазмеры = всеРазмеры.Where(x => (x.БоковаяДлинаБрюкМин <= мерка.БоковаяДлинаБрюк && x.БоковаяДлинаБрюкМакс > мерка.БоковаяДлинаБрюк && мерка.БоковаяДлинаБрюк != 0)
            || (x.ВнутренняяДлинаБрюкМин <= мерка.ДлинаБрюкПоВнутреннемуШву && x.ВнутренняяДлинаБрюкМакс > мерка.ДлинаБрюкПоВнутреннемуШву && мерка.ДлинаБрюкПоВнутреннемуШву != 0)
            || (x.ДлинаРукаваМин <= мерка.ДлинаРукава && x.ДлинаРукаваМакс > мерка.ДлинаРукава && мерка.ДлинаРукава != 0)
            || (x.ДлинаСтупниМин <= мерка.ДлинаСтопы && x.ДлинаСтупниМакс > мерка.ДлинаСтопы && мерка.ДлинаСтопы != 0)
            || (x.ОбхватБедерМин <= мерка.ОбхватБедер && x.ОбхватБедерМакс > мерка.ОбхватБедер && мерка.ОбхватБедер != 0)
            || (x.ОбхватГрудиМин <= мерка.ОбхватГруди && x.ОбхватГрудиМакс > мерка.ОбхватГруди && мерка.ОбхватГруди != 0)
            || (x.ОбхватТалииМин <= мерка.ОбхватТалии && x.ОбхватТалииМакс > мерка.ОбхватТалии && мерка.ОбхватТалии != 0)
            || (x.ОбхватШеиМин <= мерка.ОбхватШеи && x.ОбхватШеиМакс > мерка.ОбхватШеи && мерка.ОбхватШеи != 0)
            || (x.ОбхватГоловыМин <= мерка.ОбхватГоловы && x.ОбхватГоловыМакс > мерка.ОбхватГоловы && мерка.ОбхватГоловы != 0)
            || (x.РостМин <= мерка.Рост && x.РостМакс > мерка.Рост && мерка.Рост != 0))
                .ToArray();

            var первыйРазмер = подходящиеРазмеры.FirstOrDefault();

            var зависимостьОтРоста = первыйРазмер != null && первыйРазмер.РостМин != 0 && мерка.Рост != 0 && !(первыйРазмер.РостМакс > мерка.Рост && первыйРазмер.РостМин <= мерка.Рост) && всеРазмеры.Any(x => x.РостМин > мерка.Рост);

            if (подходящиеРазмеры.Length == 1)
            {
                размер = подходящиеРазмеры[0];
                return размер;
            }
            else if (подходящиеРазмеры.Length > 1 && !зависимостьОтРоста)
            {
                Dictionary<Размеры, int> совпадения = new Dictionary<Размеры, int>();
                foreach (var разм in подходящиеРазмеры)
                {
                    if (!совпадения.ContainsKey(разм))
                        совпадения[разм] = 0;

                    if (разм.БоковаяДлинаБрюкМакс > мерка.БоковаяДлинаБрюк && разм.БоковаяДлинаБрюкМин <= мерка.БоковаяДлинаБрюк && мерка.БоковаяДлинаБрюк != 0)
                        совпадения[разм]++;

                    if (разм.ВнутренняяДлинаБрюкМакс > мерка.ДлинаБрюкПоВнутреннемуШву && разм.ВнутренняяДлинаБрюкМин <= мерка.ДлинаБрюкПоВнутреннемуШву && мерка.ДлинаБрюкПоВнутреннемуШву != 0)
                        совпадения[разм]++;

                    if (разм.ДлинаРукаваМакс > мерка.ДлинаРукава && разм.ДлинаРукаваМин <= мерка.ДлинаРукава && мерка.ДлинаРукава != 0)
                        совпадения[разм]++;

                    if (разм.ДлинаСтупниМакс > мерка.ДлинаСтопы && разм.ДлинаСтупниМин <= мерка.ДлинаСтопы && мерка.ДлинаСтопы != 0)
                        совпадения[разм]++;

                    if (разм.ОбхватБедерМакс > мерка.ОбхватБедер && разм.ОбхватБедерМин <= мерка.ОбхватБедер && мерка.ОбхватБедер != 0)
                        совпадения[разм]++;

                    if (разм.ОбхватГрудиМакс > мерка.ОбхватГруди && разм.ОбхватГрудиМин <= мерка.ОбхватГруди && мерка.ОбхватГруди != 0)
                        совпадения[разм]++;

                    if (разм.ОбхватТалииМакс > мерка.ОбхватТалии && разм.ОбхватТалииМин <= мерка.ОбхватТалии && мерка.ОбхватТалии != 0)
                        совпадения[разм]++;

                    if (разм.ОбхватШеиМакс > мерка.ОбхватШеи && разм.ОбхватШеиМин <= мерка.ОбхватШеи && мерка.ОбхватШеи != 0)
                        совпадения[разм]++;

                    if (разм.РостМакс > мерка.Рост && разм.РостМин <= мерка.Рост && мерка.Рост != 0)
                        совпадения[разм]++;

                    if (разм.ОбхватГоловыМакс > мерка.ОбхватГоловы && разм.ОбхватГоловыМин <= мерка.ОбхватГоловы && мерка.ОбхватГоловы != 0)
                        совпадения[разм]++;
                }

                размер = совпадения.OrderByDescending(x => x.Value).First().Key;
                return размер;
            }
            else 
            {
                var ближайшиеБольшиеРазмеры = всеРазмеры.Where(x => (x.БоковаяДлинаБрюкМин > мерка.БоковаяДлинаБрюк && мерка.БоковаяДлинаБрюк != 0)
                || (x.ВнутренняяДлинаБрюкМин > мерка.ДлинаБрюкПоВнутреннемуШву && мерка.ДлинаБрюкПоВнутреннемуШву != 0)
                || (x.ДлинаРукаваМин > мерка.ДлинаРукава && мерка.ДлинаРукава != 0)
                || (x.ДлинаСтупниМин > мерка.ДлинаСтопы && мерка.ДлинаСтопы != 0)
                || (x.ОбхватБедерМин > мерка.ОбхватБедер && мерка.ОбхватБедер != 0)
                || (x.ОбхватГрудиМин > мерка.ОбхватГруди && мерка.ОбхватГруди != 0)
                || (x.ОбхватТалииМин > мерка.ОбхватТалии && мерка.ОбхватТалии != 0)
                || (x.ОбхватШеиМин > мерка.ОбхватШеи && мерка.ОбхватШеи != 0)
                || (x.ОбхватГоловыМин > мерка.ОбхватГоловы && мерка.ОбхватГоловы != 0)
                || (x.РостМин > мерка.Рост && мерка.Рост != 0))
                    .ToArray();

                if (ближайшиеБольшиеРазмеры.Length == 1)
                {
                    размер = ближайшиеБольшиеРазмеры[0];
                    return размер;
                }
                else if (ближайшиеБольшиеРазмеры.Length > 1)
                {
                    Dictionary<Размеры, int> совпадения = new Dictionary<Размеры, int>();
                    foreach (var разм in ближайшиеБольшиеРазмеры)
                    {
                        if (!совпадения.ContainsKey(разм))
                            совпадения[разм] = 0;

                        if (разм.БоковаяДлинаБрюкМакс > мерка.БоковаяДлинаБрюк && разм.БоковаяДлинаБрюкМин <= мерка.БоковаяДлинаБрюк && мерка.БоковаяДлинаБрюк != 0)
                            совпадения[разм]+=2;
                        else if (разм.БоковаяДлинаБрюкМин > мерка.БоковаяДлинаБрюк && мерка.БоковаяДлинаБрюк != 0 && разм.БоковаяДлинаБрюкМин == ближайшиеБольшиеРазмеры.Where(x => x.БоковаяДлинаБрюкМин > мерка.БоковаяДлинаБрюк).OrderBy(x => x.БоковаяДлинаБрюкМин).First().БоковаяДлинаБрюкМин)
                            совпадения[разм]++;

                        if (разм.ВнутренняяДлинаБрюкМакс > мерка.ДлинаБрюкПоВнутреннемуШву && разм.ВнутренняяДлинаБрюкМин <= мерка.ДлинаБрюкПоВнутреннемуШву && мерка.ДлинаБрюкПоВнутреннемуШву != 0)
                            совпадения[разм] += 2;
                        else if (разм.ВнутренняяДлинаБрюкМин > мерка.ДлинаБрюкПоВнутреннемуШву && мерка.ДлинаБрюкПоВнутреннемуШву != 0 && разм.ВнутренняяДлинаБрюкМин == ближайшиеБольшиеРазмеры.Where(x => x.ВнутренняяДлинаБрюкМин > мерка.ДлинаБрюкПоВнутреннемуШву).OrderBy(x => x.ВнутренняяДлинаБрюкМин).First().ВнутренняяДлинаБрюкМин)
                            совпадения[разм]++;

                        if (разм.ДлинаРукаваМакс > мерка.ДлинаРукава && разм.ДлинаРукаваМин <= мерка.ДлинаРукава && мерка.ДлинаРукава != 0)
                            совпадения[разм] += 2;
                        else if (разм.ДлинаРукаваМин > мерка.ДлинаРукава && мерка.ДлинаРукава != 0 && разм.ДлинаРукаваМин == ближайшиеБольшиеРазмеры.Where(x => x.ДлинаРукаваМин > мерка.ДлинаРукава).OrderBy(x => x.ДлинаРукаваМин).First().ДлинаРукаваМин)
                            совпадения[разм]++;

                        if (разм.ДлинаСтупниМакс > мерка.ДлинаСтопы && разм.ДлинаСтупниМин <= мерка.ДлинаСтопы && мерка.ДлинаСтопы != 0)
                            совпадения[разм] += 2;
                        else if (разм.ДлинаСтупниМин > мерка.ДлинаСтопы && мерка.ДлинаСтопы != 0 && разм.ДлинаСтупниМин == ближайшиеБольшиеРазмеры.Where(x => x.ДлинаСтупниМин > мерка.ДлинаСтопы).OrderBy(x => x.ДлинаСтупниМин).First().ДлинаСтупниМин)
                            совпадения[разм]++;

                        if (разм.ОбхватБедерМакс > мерка.ОбхватБедер && разм.ОбхватБедерМин <= мерка.ОбхватБедер && мерка.ОбхватБедер != 0)
                            совпадения[разм] += 2;
                        else if (разм.ОбхватБедерМин > мерка.ОбхватБедер && мерка.ОбхватБедер != 0 && разм.ОбхватБедерМин == ближайшиеБольшиеРазмеры.Where(x => x.ОбхватБедерМин > мерка.ОбхватБедер).OrderBy(x => x.ОбхватБедерМин).First().ОбхватБедерМин)
                            совпадения[разм]++;

                        if (разм.ОбхватГрудиМакс > мерка.ОбхватГруди && разм.ОбхватГрудиМин <= мерка.ОбхватГруди && мерка.ОбхватГруди != 0)
                            совпадения[разм] += 2;
                        else if (разм.ОбхватГрудиМин > мерка.ОбхватГруди && мерка.ОбхватГруди != 0 && разм.ОбхватГрудиМин == ближайшиеБольшиеРазмеры.Where(x => x.ОбхватГрудиМин > мерка.ОбхватГруди).OrderBy(x => x.ОбхватГрудиМин).First().ОбхватГрудиМин)
                            совпадения[разм]++;

                        if (разм.ОбхватТалииМакс > мерка.ОбхватТалии && разм.ОбхватТалииМин <= мерка.ОбхватТалии && мерка.ОбхватТалии != 0)
                            совпадения[разм] += 2;
                        else if (разм.ОбхватТалииМин > мерка.ОбхватТалии && мерка.ОбхватТалии != 0 && разм.ОбхватТалииМин == ближайшиеБольшиеРазмеры.Where(x => x.ОбхватТалииМин > мерка.ОбхватТалии).OrderBy(x => x.ОбхватТалииМин).First().ОбхватТалииМин)
                            совпадения[разм]++;

                        if (разм.ОбхватШеиМакс > мерка.ОбхватШеи && разм.ОбхватШеиМин <= мерка.ОбхватШеи && мерка.ОбхватШеи != 0)
                            совпадения[разм] += 2;
                        else if (разм.ОбхватШеиМин > мерка.ОбхватШеи && мерка.ОбхватШеи != 0 && разм.ОбхватШеиМин == ближайшиеБольшиеРазмеры.Where(x => x.ОбхватШеиМин > мерка.ОбхватШеи).OrderBy(x => x.ОбхватШеиМин).First().ОбхватШеиМин)
                            совпадения[разм]++;

                        if (разм.РостМин > мерка.Рост && мерка.Рост != 0 && разм.РостМин == ближайшиеБольшиеРазмеры.Where(x => x.РостМин > мерка.Рост).OrderBy(x => x.РостМин).First().РостМин)
                            совпадения[разм]++;

                        if (разм.ОбхватГоловыМакс > мерка.ОбхватГоловы && разм.ОбхватГоловыМин <= мерка.ОбхватГоловы && мерка.ОбхватГоловы != 0)
                            совпадения[разм] += 2;
                        else if (разм.ОбхватГоловыМин > мерка.ОбхватГоловы && мерка.ОбхватГоловы != 0 && разм.ОбхватГоловыМин == ближайшиеБольшиеРазмеры.Where(x => x.ОбхватГоловыМин > мерка.ОбхватГоловы).OrderBy(x => x.ОбхватГоловыМин).First().ОбхватГоловыМин)
                            совпадения[разм]++;
                    }

                    var максКолСовпадений = совпадения.OrderByDescending(x => x.Value).First().Value;
                    размер = совпадения.OrderByDescending(x => x.Value).First().Key;

                    if (совпадения.Where(x => x.Value == максКолСовпадений).ToArray().Length > 1)
                    {
                        размер = совпадения
                            .Where(x => x.Value == максКолСовпадений)
                            .Select(x => x.Key)
                            .Where(x => x.РостМин > мерка.Рост && мерка.Рост != 0 && x.РостМин == ближайшиеБольшиеРазмеры.Where(y => y.РостМин > мерка.Рост).OrderBy(y => y.РостМин).First().РостМин)
                            .First();
                    }

                    return размер;
                }
                else
                {
                    NsgSettings.MainForm.ShowMessage($"Для {видНоменклатуры} по меркам {this} не найден подходящий размер в справочнике", System.Windows.Forms.MessageBoxIcon.Warning);
                    return размер;
                }
            }

        }

        public void ЗаполнитьТаблицуРазмеров() 
        {
            ТаблицаРазмеров.DeleteAll();

            var cmpВидНоменклатуры = new NsgCompare();
            cmpВидНоменклатуры.Add(ВидСвойствНоменклатуры.Names.СостояниеДокумента, Сервис.СостоянияОбъекта.Удален, NsgComparison.NotEqual);

            var всеВидыНоменклатуры = ВидСвойствНоменклатуры.Новый().FindAll(cmpВидНоменклатуры);

            foreach (var вид in всеВидыНоменклатуры)
            {
                var cmpРазмерныеСетки = new NsgCompare();
                cmpРазмерныеСетки.Add(ВидыРазмернойСетки.Names.ВидНоменклатуры, вид);
                cmpРазмерныеСетки.Add(ВидыРазмернойСетки.Names.СостояниеДокумента, Сервис.СостоянияОбъекта.Удален, NsgComparison.NotEqual);

                var всеРазмерныеСетки = ВидыРазмернойСетки.Новый().FindAll(cmpРазмерныеСетки);

                foreach (var размернаяСетка in всеРазмерныеСетки)
                {
                    var размер = ПолучитьРазмер(Номенклатура.Новый(), размернаяСетка, вид);
                    if (размер.Selected)
                    {
                        var строка = ТаблицаРазмеров.NewRow();
                        строка.Размер = размер;
                        строка.ВидСвойствНоменклатуры = вид;
                        строка.ВидРазмернойСетки = размернаяСетка;
                        строка.Post();
                    }
                }
            }
        }
    }

}
