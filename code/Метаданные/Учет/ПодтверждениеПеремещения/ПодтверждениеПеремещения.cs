using System;
using System.Collections.Generic;
using System.Text;
using NsgSoft.DataObjects;
using NsgSoft.Database;
using System.IO;
using NsgSoft.Common;
using TechControl.Метаданные.УчетИнструмента;
using TechControl.Метаданные.Мониторинг;

namespace TechControl.Метаданные.Учет
{

    public partial class ПодтверждениеПеремещения
    {
        protected override bool Handling()
        {
            if (ДокументОснование != null && ДокументОснование.Selected && ДокументОснование is ПеремещениеИнструмента перемещениеИнструмента)
            {
                ОстаткиНоменклатуры остаткиНоменклатуры = ОстаткиНоменклатуры.Новый(this);
                var cmp = new NsgCompare().Add(ОстаткиНоменклатуры.Names.Владелец, ДокументОснование);
                var движ = остаткиНоменклатуры.GetRests(cmp);
                if (движ != null && движ.Count > 0)
                {
                    остаткиНоменклатуры.New();
                    foreach (var ост in движ.Rows)
                    {
                        остаткиНоменклатуры.ВидДвижения = (ост[ОстаткиНоменклатуры.Names.ВидДвижения].ToReferent() as Сервис.ВидыДвижений) == Сервис.ВидыДвижений.Приход ? Сервис.ВидыДвижений.Расход : Сервис.ВидыДвижений.Приход;
                        остаткиНоменклатуры.Количество = ост[ОстаткиНоменклатуры.Names.Количество].ToDecimal();
                        остаткиНоменклатуры.Номенклатура = ост[ОстаткиНоменклатуры.Names.Номенклатура].ToReferent() as Номенклатура;
                        остаткиНоменклатуры.Объект = ост[ОстаткиНоменклатуры.Names.Объект].ToReferent() as Объекты;
                        остаткиНоменклатуры.Размер = ост[ОстаткиНоменклатуры.Names.Размер].ToReferent() as Размеры;
                        остаткиНоменклатуры.Сотрудник = ост[ОстаткиНоменклатуры.Names.Сотрудник].ToReferent() as Сотрудники;
                        остаткиНоменклатуры.Стоимость = ост[ОстаткиНоменклатуры.Names.Стоимость].ToDecimal();
                        остаткиНоменклатуры.Перемещение = Перемещение.Новый();
                        остаткиНоменклатуры.AddMovement();
                    }
                    return ПроведениеПоРегиструУчетИнструмента() && ПроведениеПоРегиструОстаткиНоменклатуры() && остаткиНоменклатуры.Post();
                }
                
                return ПроведениеПоРегиструУчетИнструмента() && ПроведениеПоРегиструОстаткиНоменклатуры();
            }
            else
            {
                ОстаткиНоменклатуры остаткиНоменклатуры = ОстаткиНоменклатуры.Новый(this);
                var cmp = new NsgCompare().Add(ОстаткиНоменклатуры.Names.Перемещение, ДокументОснование);
                var движ = остаткиНоменклатуры.GetRests(cmp);
                foreach (var ост in движ.Rows)
                {
                    //остаткиНоменклатуры.ВидДвижения = (ост[ОстаткиНоменклатуры.Names.ВидДвижения].ToReferent() as Сервис.ВидыДвижений) == Сервис.ВидыДвижений.Приход ? Сервис.ВидыДвижений.Расход : Сервис.ВидыДвижений.Приход;
                    //остаткиНоменклатуры.Количество = ост[ОстаткиНоменклатуры.Names.Количество].ToDecimal();
                    //остаткиНоменклатуры.Номенклатура = ост[ОстаткиНоменклатуры.Names.Номенклатура].ToReferent() as Номенклатура;
                    //остаткиНоменклатуры.Объект = this.Объект;
                    //остаткиНоменклатуры.Размер = i.Размер;
                    //остаткиНоменклатуры.Сотрудник = this.Сотрудник;
                    ////      остаткиНоменклатуры.Стоимость = i.Стоимость;
                    //остаткиНоменклатуры.Перемещение = null;
                    //остаткиНоменклатуры.AddMovement();
                }

                остаткиНоменклатуры.New();
                foreach (var i in this.Таблица.Rows)
                {
                    остаткиНоменклатуры.ВидДвижения = Сервис.ВидыДвижений.Приход;
                    остаткиНоменклатуры.Количество = i.Количество;
                    остаткиНоменклатуры.Номенклатура = i.Номенклатура;
                    остаткиНоменклатуры.Объект = this.Объект;
                    остаткиНоменклатуры.Размер = i.Размер;
                    остаткиНоменклатуры.Сотрудник = this.Сотрудник;
                    //      остаткиНоменклатуры.Стоимость = i.Стоимость;
                    остаткиНоменклатуры.Перемещение = null;
                    остаткиНоменклатуры.AddMovement();
                }
                return остаткиНоменклатуры.Post();
            }
        }

        private bool ПроведениеПоРегиструУчетИнструмента()
        {
            РегистрУчетИнструмента рег = РегистрУчетИнструмента.Новый(this);

            рег.New();

            РегистрУчетИнструмента регОстатки = РегистрУчетИнструмента.Новый();
            NsgMemoryTable остатки = null;

            if (Отправитель is Сотрудники сотрудникОтправитель)
            {
                регОстатки.Сотрудник = сотрудникОтправитель;
                остатки = регОстатки.GetRests(ДатаДокумента.AddTicks(-1));
            }
            else if (Отправитель is Объекты объектОтправитель)
            {
                регОстатки.Объект = объектОтправитель;
                остатки = регОстатки.GetRests(ДатаДокумента.AddTicks(-1));
            }

            var сотрудник = Сотрудники.Новый();
            var объект = Объекты.Новый();

            if (Получатель is Сотрудники сотрудникПолучатель)
            {
                сотрудник = сотрудникПолучатель;
                объект = сотрудникПолучатель.ОсновнойОбъект;
            }
            else if (Получатель is Объекты объектПолучатель)
            {
                сотрудник = объектПолучатель.Ответственный;
                объект = объектПолучатель;
            }

            foreach (var строка in Таблица.AllRows)
            {
                if (строка.ПолучениеПодтверждено)
                {
                    if (остатки != null)
                    {
                        foreach (var item in остатки.AllRows)
                        {
                            var серийник = item[РегистрУчетИнструмента.Names.СерийныйНомер].ToString();
                            if (строка.СерийныйНомер == серийник)
                            {
                                рег.Сотрудник = item[РегистрУчетИнструмента.Names.Сотрудник].ToReferent() as Сотрудники;
                                рег.НоменклатураИнструмента = строка.Номенклатура;
                                рег.Объект = item[РегистрУчетИнструмента.Names.Объект].ToReferent() as Объекты;
                                рег.Фотография = строка.Фотография;
                                рег.СерийныйНомер = серийник;
                                рег.Дата = ДатаДокумента.AddTicks(-1);

                                рег.AddMovement();
                            }
                        }
                    }

                    рег.Сотрудник = сотрудник;
                    рег.НоменклатураИнструмента = строка.Номенклатура;
                    рег.Объект = объект;
                    рег.Фотография = строка.Фотография;
                    рег.СерийныйНомер = строка.СерийныйНомер;
                    рег.Дата = ДатаДокумента;

                    рег.AddMovement();
                }
                else
                {
                    if (Отправитель is Сотрудники сотрудникОтправительВСтроку)
                    {
                        рег.Сотрудник = сотрудникОтправительВСтроку;
                        рег.Объект = сотрудникОтправительВСтроку.ОсновнойОбъект;
                    }
                    else if (Отправитель is Объекты объектОтправительВСтроку)
                    {
                        рег.Сотрудник = объектОтправительВСтроку.Ответственный;
                        рег.Объект = объектОтправительВСтроку;
                    }

                    рег.НоменклатураИнструмента = строка.Номенклатура;
                    рег.Фотография = строка.Фотография;
                    рег.СерийныйНомер = строка.СерийныйНомер;
                    рег.Дата = ДатаДокумента.AddTicks(-1);

                    рег.AddMovement();
                }
            }

            return рег.Post();
        }

        private bool ПроведениеПоРегиструОстаткиНоменклатуры()
        {
            ОстаткиНоменклатуры остаткиНоменклатуры = ОстаткиНоменклатуры.Новый(this);

            var сотрудникОтправитель = Сотрудники.Новый();
            var объектОтправитель = Объекты.Новый();

            if (Отправитель is Сотрудники)
            {
                сотрудникОтправитель = Отправитель as Сотрудники;
                объектОтправитель = сотрудникОтправитель.ОсновнойОбъект;
            }
            else if (Отправитель is Объекты)
            {
                объектОтправитель = Отправитель as Объекты;
                сотрудникОтправитель = объектОтправитель.Ответственный;
            }

            var сотрудник = Сотрудники.Новый();
            var объект = Объекты.Новый();

            if (Получатель is Сотрудники сотрудникПолучатель)
            {
                сотрудник = сотрудникПолучатель;
                объект = сотрудникПолучатель.ОсновнойОбъект;
            }
            else if (Получатель is Объекты объектПолучатель)
            {
                сотрудник = объектПолучатель.Ответственный;
                объект = объектПолучатель;
            }
            
            остаткиНоменклатуры.New();
            foreach (var i in this.Таблица.AllRows)
            {
                if (!i.ПолучениеПодтверждено)
                {
                    сотрудник = сотрудникОтправитель;
                    объект = объектОтправитель;
                }

                decimal количество = 1;
                decimal стоимость = i.Номенклатура.ПолучитьЦену(ДатаДокумента);
                if (i.СерийныйНомер == string.Empty)
                {
                    количество = i.Количество;
                    стоимость = количество * стоимость;
                }

                остаткиНоменклатуры.ВидДвижения = Сервис.ВидыДвижений.Расход;
                остаткиНоменклатуры.Количество = количество;
                остаткиНоменклатуры.Стоимость = стоимость;
                остаткиНоменклатуры.Номенклатура = i.Номенклатура;
                остаткиНоменклатуры.Объект = объектОтправитель;
                остаткиНоменклатуры.Размер = i.Размер;
                остаткиНоменклатуры.Сотрудник = сотрудникОтправитель;
                остаткиНоменклатуры.AddMovement();

                остаткиНоменклатуры.ВидДвижения = Сервис.ВидыДвижений.Приход;
                остаткиНоменклатуры.Количество = количество;
                остаткиНоменклатуры.Стоимость = стоимость;
                остаткиНоменклатуры.Номенклатура = i.Номенклатура;
                остаткиНоменклатуры.Объект = объект;
                остаткиНоменклатуры.Размер = i.Размер;
                остаткиНоменклатуры.Сотрудник = сотрудник;
                остаткиНоменклатуры.AddMovement();
            }
            return остаткиНоменклатуры.Post();
        }

        public override void OnBaseAssigned()
        {
            base.OnBaseAssigned();
            if (ДокументОснование != null && ДокументОснование.Selected && ДокументОснование is Перемещение)
            {
                var докПеремещение = ДокументОснование as Перемещение;
                this.CopyNotPredefinedFieldsFromObject(докПеремещение);
                this.Таблица.CopyNotPredefinedFieldsFromObject(докПеремещение.Таблица);
            }
            else if(ДокументОснование != null && ДокументОснование.Selected && ДокументОснование is ПеремещениеИнструмента перемещениеИнструмента)
            {
                this.CopyNotPredefinedFieldsFromObject(перемещениеИнструмента);
                Отправитель = перемещениеИнструмента.Отправитель;
                Получатель = перемещениеИнструмента.Получатель;
                this.Таблица.CopyNotPredefinedFieldsFromObject(перемещениеИнструмента.Таблица);
                foreach (var item in перемещениеИнструмента.Таблица.AllRows)
                {
                    var row = Таблица.NewRow();
                    row.CopyNotPredefinedFieldsFromObject(item);
                    row.Номенклатура = item.НоменклатураИнструмента;
                    row.СерийныйНомер = item.СерийныйНомер;
                    row.Фотография = item.Фотография;
                }
            }
        }
    }
}
