using System;
using System.Collections.Generic;
using System.Text;
using NsgSoft.DataObjects;
using NsgSoft.Database;
using System.IO;
using NsgSoft.Common;
using TechControl.Метаданные.Сервис;
using System.Linq;
using TechControl.Метаданные.Учет;

namespace TechControl.Метаданные.УчетСпецодеждыИСИЗ
{
    
    public partial class ЗаявкиПоставщикам
    {
        protected override bool Handling()
        {
            if (Статус != Перечисления.СтатусыЗаявок.Отменена)
            {
                var регРезерва = РегистрРезерваЗП.Новый(this);
                foreach (var item in Таблица.AllRows)
                {
                    регРезерва.New();
                    регРезерва.Поставщик = Поставщик;
                    регРезерва.ДокументЗаявкиПоставщикам = this;
                    регРезерва.Сотрудник = Сотрудник;
                    регРезерва.Объект = Объект;
                    регРезерва.ВидДвижения = ВидыДвижений.Приход;
                    регРезерва.Номенклатура = item.Номенклатура;
                    регРезерва.Размер = item.Размер;
                    регРезерва.Количество = item.Количество;
                    регРезерва.AddMovement();
                }
                return регРезерва.Post();
            }
            else
            {
                return true;
            }
        }

        public Tuple<ПриходнаяНакладная, ПеремещениеСпецодежды> ЗавершитьЗаявку()
        {
            if (Таблица.AllRows.Any(x => x.Цена == 0))
            {
                throw new Exception("В таблице имеются строки без указанной цены");
            }
            else
            {
                if (Статус == Перечисления.СтатусыЗаявок.Выполнена)
                {
                    throw new Exception("Заявка уже завершена");
                }
                else if (Статус == Перечисления.СтатусыЗаявок.Отменена)
                {
                    throw new Exception("Попытка завершить отмененную заявку");
                }
                else
                {
                    var накладная = ПриходнаяНакладная.Новый();
                    var перемещение = ПеремещениеСпецодежды.Новый();
                    var cmpНакладная = new NsgCompare();
                    cmpНакладная.Add(ПриходнаяНакладная.Names.ДокументОснование, this);
                    cmpНакладная.Add(ПриходнаяНакладная.Names.СостояниеДокумента, Сервис.СостоянияОбъекта.Удален, NsgComparison.NotEqual);

                    var cmpПеремещение = new NsgCompare();
                    cmpПеремещение.Add(ПеремещениеСпецодежды.Names.ДокументОснование, this);
                    cmpПеремещение.Add(ПеремещениеСпецодежды.Names.СостояниеДокумента, Сервис.СостоянияОбъекта.Удален, NsgComparison.NotEqual);
                    if (!накладная.Find(cmpНакладная) && !перемещение.Find(cmpПеремещение))
                    {
                        Статус = Перечисления.СтатусыЗаявок.Выполнена;

                        накладная.New();
                        накладная.ВводНаОсновании(this);
                        накладная.Post();

                        перемещение.New();
                        перемещение.ВводНаОсновании(this);
                        перемещение.Post();

                        return new Tuple<ПриходнаяНакладная, ПеремещениеСпецодежды>(накладная, перемещение);
                    }
                    else
                    {
                        throw new Exception("Заявку уже закрывали ранее и изменили ей статус");
                    }
                }
            }
        }

        public void Отменить()
        {
            if (Статус == Перечисления.СтатусыЗаявок.Отменена)
            {
                throw new Exception("Заявка уже отменена");
            }
            else
            {
                var накладная = ПриходнаяНакладная.Новый();
                var перемещение = ПеремещениеСпецодежды.Новый();
                var cmpНакладная = new NsgCompare();
                cmpНакладная.Add(ПриходнаяНакладная.Names.ДокументОснование, this);
                cmpНакладная.Add(ПриходнаяНакладная.Names.СостояниеДокумента, Сервис.СостоянияОбъекта.Удален, NsgComparison.NotEqual);

                var cmpПеремещение = new NsgCompare();
                cmpПеремещение.Add(ПеремещениеСпецодежды.Names.ДокументОснование, this);
                cmpПеремещение.Add(ПеремещениеСпецодежды.Names.СостояниеДокумента, Сервис.СостоянияОбъекта.Удален, NsgComparison.NotEqual);
                if (накладная.Find(cmpНакладная) || перемещение.Find(cmpПеремещение))
                {
                    throw new Exception("На основании заявки созданы документы. Отмена невозможна.");
                }
                else
                {
                    Статус = Перечисления.СтатусыЗаявок.Отменена;
                }
            }
        }
    }

}
