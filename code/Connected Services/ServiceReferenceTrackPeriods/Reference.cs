//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TechControl.ServiceReferenceTrackPeriods {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SpicStatisticsSession", Namespace="http://schemas.datacontract.org/2004/07/Scout.Plugins.Spic.Server.Statistics.Cont" +
        "roller")]
    [System.SerializableAttribute()]
    public partial class SpicStatisticsSession : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid StatisticsSessionIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid StatisticsSessionId {
            get {
                return this.StatisticsSessionIdField;
            }
            set {
                if ((this.StatisticsSessionIdField.Equals(value) != true)) {
                    this.StatisticsSessionIdField = value;
                    this.RaisePropertyChanged("StatisticsSessionId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SpicAddonStatisticsResult", Namespace="http://schemas.datacontract.org/2004/07/Scout.Plugins.Spic.Server.Statistics.Conc" +
        "rete")]
    [System.SerializableAttribute()]
    public partial class SpicAddonStatisticsResult : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ErrorTextField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private TechControl.ServiceReferenceTrackPeriods.SpicStatisticsOperationResult StatusField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ErrorText {
            get {
                return this.ErrorTextField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorTextField, value) != true)) {
                    this.ErrorTextField = value;
                    this.RaisePropertyChanged("ErrorText");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TechControl.ServiceReferenceTrackPeriods.SpicStatisticsOperationResult Status {
            get {
                return this.StatusField;
            }
            set {
                if ((object.ReferenceEquals(this.StatusField, value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SpicStatisticsOperationResult", Namespace="http://schemas.datacontract.org/2004/07/Scout.Plugins.Spic.Server.Infrastructure." +
        "Data")]
    [System.SerializableAttribute()]
    public partial class SpicStatisticsOperationResult : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Value {
            get {
                return this.ValueField;
            }
            set {
                if ((object.ReferenceEquals(this.ValueField, value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SpicTrackPeriodsMileageStatisticsResult", Namespace="http://schemas.datacontract.org/2004/07/Scout.Plugins.Spic.Server.Statistics.Trac" +
        "kPeriodsMileageStat")]
    [System.SerializableAttribute()]
    public partial class SpicTrackPeriodsMileageStatisticsResult : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private TechControl.ServiceReferenceTrackPeriods.SpicStatisticsChunkInfo ChunkInfoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private TechControl.ServiceReferenceTrackPeriods.SpicTrackPeriodsMileageStatistics StatisticsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TechControl.ServiceReferenceTrackPeriods.SpicStatisticsChunkInfo ChunkInfo {
            get {
                return this.ChunkInfoField;
            }
            set {
                if ((object.ReferenceEquals(this.ChunkInfoField, value) != true)) {
                    this.ChunkInfoField = value;
                    this.RaisePropertyChanged("ChunkInfo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TechControl.ServiceReferenceTrackPeriods.SpicTrackPeriodsMileageStatistics Statistics {
            get {
                return this.StatisticsField;
            }
            set {
                if ((object.ReferenceEquals(this.StatisticsField, value) != true)) {
                    this.StatisticsField = value;
                    this.RaisePropertyChanged("Statistics");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SpicStatisticsChunkInfo", Namespace="http://schemas.datacontract.org/2004/07/Scout.Plugins.Spic.Server.Statistics.Conc" +
        "rete")]
    [System.SerializableAttribute()]
    public partial class SpicStatisticsChunkInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ChunkNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ErrorTextField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsFinalChunkField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private TechControl.ServiceReferenceTrackPeriods.SpicDateTimeRange PeriodField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private TechControl.ServiceReferenceTrackPeriods.SpicStatisticsOperationResult StatusField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ChunkNumber {
            get {
                return this.ChunkNumberField;
            }
            set {
                if ((this.ChunkNumberField.Equals(value) != true)) {
                    this.ChunkNumberField = value;
                    this.RaisePropertyChanged("ChunkNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ErrorText {
            get {
                return this.ErrorTextField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorTextField, value) != true)) {
                    this.ErrorTextField = value;
                    this.RaisePropertyChanged("ErrorText");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsFinalChunk {
            get {
                return this.IsFinalChunkField;
            }
            set {
                if ((this.IsFinalChunkField.Equals(value) != true)) {
                    this.IsFinalChunkField = value;
                    this.RaisePropertyChanged("IsFinalChunk");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TechControl.ServiceReferenceTrackPeriods.SpicDateTimeRange Period {
            get {
                return this.PeriodField;
            }
            set {
                if ((object.ReferenceEquals(this.PeriodField, value) != true)) {
                    this.PeriodField = value;
                    this.RaisePropertyChanged("Period");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TechControl.ServiceReferenceTrackPeriods.SpicStatisticsOperationResult Status {
            get {
                return this.StatusField;
            }
            set {
                if ((object.ReferenceEquals(this.StatusField, value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SpicTrackPeriodsMileageStatistics", Namespace="http://schemas.datacontract.org/2004/07/Scout.Plugins.Spic.Server.Statistics.Trac" +
        "kPeriodsMileageStat")]
    [System.SerializableAttribute()]
    public partial class SpicTrackPeriodsMileageStatistics : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.TimeSpan BreakDurationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<double> BreakMileageKmField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<double> MaxSpeedKmhField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<double> MinSpeedKmhField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.TimeSpan MovementDurationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<double> MovementMileageKmField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.TimeSpan ParkingDurationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private TechControl.ServiceReferenceTrackPeriods.SpicTrackPeriodMileage[] PeriodsMileageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.TimeSpan TotalDurationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<double> TotalMileageKmField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<double> WorkTimeMileageKmField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.TimeSpan BreakDuration {
            get {
                return this.BreakDurationField;
            }
            set {
                if ((this.BreakDurationField.Equals(value) != true)) {
                    this.BreakDurationField = value;
                    this.RaisePropertyChanged("BreakDuration");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<double> BreakMileageKm {
            get {
                return this.BreakMileageKmField;
            }
            set {
                if ((this.BreakMileageKmField.Equals(value) != true)) {
                    this.BreakMileageKmField = value;
                    this.RaisePropertyChanged("BreakMileageKm");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<double> MaxSpeedKmh {
            get {
                return this.MaxSpeedKmhField;
            }
            set {
                if ((this.MaxSpeedKmhField.Equals(value) != true)) {
                    this.MaxSpeedKmhField = value;
                    this.RaisePropertyChanged("MaxSpeedKmh");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<double> MinSpeedKmh {
            get {
                return this.MinSpeedKmhField;
            }
            set {
                if ((this.MinSpeedKmhField.Equals(value) != true)) {
                    this.MinSpeedKmhField = value;
                    this.RaisePropertyChanged("MinSpeedKmh");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.TimeSpan MovementDuration {
            get {
                return this.MovementDurationField;
            }
            set {
                if ((this.MovementDurationField.Equals(value) != true)) {
                    this.MovementDurationField = value;
                    this.RaisePropertyChanged("MovementDuration");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<double> MovementMileageKm {
            get {
                return this.MovementMileageKmField;
            }
            set {
                if ((this.MovementMileageKmField.Equals(value) != true)) {
                    this.MovementMileageKmField = value;
                    this.RaisePropertyChanged("MovementMileageKm");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.TimeSpan ParkingDuration {
            get {
                return this.ParkingDurationField;
            }
            set {
                if ((this.ParkingDurationField.Equals(value) != true)) {
                    this.ParkingDurationField = value;
                    this.RaisePropertyChanged("ParkingDuration");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TechControl.ServiceReferenceTrackPeriods.SpicTrackPeriodMileage[] PeriodsMileage {
            get {
                return this.PeriodsMileageField;
            }
            set {
                if ((object.ReferenceEquals(this.PeriodsMileageField, value) != true)) {
                    this.PeriodsMileageField = value;
                    this.RaisePropertyChanged("PeriodsMileage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.TimeSpan TotalDuration {
            get {
                return this.TotalDurationField;
            }
            set {
                if ((this.TotalDurationField.Equals(value) != true)) {
                    this.TotalDurationField = value;
                    this.RaisePropertyChanged("TotalDuration");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<double> TotalMileageKm {
            get {
                return this.TotalMileageKmField;
            }
            set {
                if ((this.TotalMileageKmField.Equals(value) != true)) {
                    this.TotalMileageKmField = value;
                    this.RaisePropertyChanged("TotalMileageKm");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<double> WorkTimeMileageKm {
            get {
                return this.WorkTimeMileageKmField;
            }
            set {
                if ((this.WorkTimeMileageKmField.Equals(value) != true)) {
                    this.WorkTimeMileageKmField = value;
                    this.RaisePropertyChanged("WorkTimeMileageKm");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SpicDateTimeRange", Namespace="http://schemas.datacontract.org/2004/07/Scout.Plugins.Spic.Server.Infrastructure." +
        "Data")]
    [System.SerializableAttribute()]
    public partial class SpicDateTimeRange : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime BeginField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime EndField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Begin {
            get {
                return this.BeginField;
            }
            set {
                if ((this.BeginField.Equals(value) != true)) {
                    this.BeginField = value;
                    this.RaisePropertyChanged("Begin");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime End {
            get {
                return this.EndField;
            }
            set {
                if ((this.EndField.Equals(value) != true)) {
                    this.EndField = value;
                    this.RaisePropertyChanged("End");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SpicTrackPeriodMileage", Namespace="http://schemas.datacontract.org/2004/07/Scout.Plugins.Spic.Server.Statistics.Trac" +
        "kPeriodsMileageStat")]
    [System.SerializableAttribute()]
    public partial class SpicTrackPeriodMileage : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<double> AverageSpeedKmhField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<double> MaxSpeedKmhField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<double> MileageKmField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<double> MinSpeedKmhField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private TechControl.ServiceReferenceTrackPeriods.SpicDateTimeRange PeriodField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private TechControl.ServiceReferenceTrackPeriods.SpicTrackPeriodType TypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<double> WorkTimeMileageKmField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<double> AverageSpeedKmh {
            get {
                return this.AverageSpeedKmhField;
            }
            set {
                if ((this.AverageSpeedKmhField.Equals(value) != true)) {
                    this.AverageSpeedKmhField = value;
                    this.RaisePropertyChanged("AverageSpeedKmh");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<double> MaxSpeedKmh {
            get {
                return this.MaxSpeedKmhField;
            }
            set {
                if ((this.MaxSpeedKmhField.Equals(value) != true)) {
                    this.MaxSpeedKmhField = value;
                    this.RaisePropertyChanged("MaxSpeedKmh");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<double> MileageKm {
            get {
                return this.MileageKmField;
            }
            set {
                if ((this.MileageKmField.Equals(value) != true)) {
                    this.MileageKmField = value;
                    this.RaisePropertyChanged("MileageKm");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<double> MinSpeedKmh {
            get {
                return this.MinSpeedKmhField;
            }
            set {
                if ((this.MinSpeedKmhField.Equals(value) != true)) {
                    this.MinSpeedKmhField = value;
                    this.RaisePropertyChanged("MinSpeedKmh");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TechControl.ServiceReferenceTrackPeriods.SpicDateTimeRange Period {
            get {
                return this.PeriodField;
            }
            set {
                if ((object.ReferenceEquals(this.PeriodField, value) != true)) {
                    this.PeriodField = value;
                    this.RaisePropertyChanged("Period");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TechControl.ServiceReferenceTrackPeriods.SpicTrackPeriodType Type {
            get {
                return this.TypeField;
            }
            set {
                if ((object.ReferenceEquals(this.TypeField, value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<double> WorkTimeMileageKm {
            get {
                return this.WorkTimeMileageKmField;
            }
            set {
                if ((this.WorkTimeMileageKmField.Equals(value) != true)) {
                    this.WorkTimeMileageKmField = value;
                    this.RaisePropertyChanged("WorkTimeMileageKm");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SpicTrackPeriodType", Namespace="http://schemas.datacontract.org/2004/07/Scout.Plugins.Spic.Server.Statistics.Spic" +
        "TrackPeriodStat")]
    [System.SerializableAttribute()]
    public partial class SpicTrackPeriodType : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Value {
            get {
                return this.ValueField;
            }
            set {
                if ((object.ReferenceEquals(this.ValueField, value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReferenceTrackPeriods.ISpicSoapTrackPeriodsMileageStatisticsService")]
    public interface ISpicSoapTrackPeriodsMileageStatisticsService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISpicSoapTrackPeriodsMileageStatisticsService/AddStatisticsReq" +
            "uest", ReplyAction="http://tempuri.org/ISpicSoapTrackPeriodsMileageStatisticsService/AddStatisticsReq" +
            "uestResponse")]
        TechControl.ServiceReferenceTrackPeriods.SpicAddonStatisticsResult AddStatisticsRequest(TechControl.ServiceReferenceTrackPeriods.SpicStatisticsSession session);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISpicSoapTrackPeriodsMileageStatisticsService/AddStatisticsReq" +
            "uest", ReplyAction="http://tempuri.org/ISpicSoapTrackPeriodsMileageStatisticsService/AddStatisticsReq" +
            "uestResponse")]
        System.Threading.Tasks.Task<TechControl.ServiceReferenceTrackPeriods.SpicAddonStatisticsResult> AddStatisticsRequestAsync(TechControl.ServiceReferenceTrackPeriods.SpicStatisticsSession session);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISpicSoapTrackPeriodsMileageStatisticsService/GetStatistics", ReplyAction="http://tempuri.org/ISpicSoapTrackPeriodsMileageStatisticsService/GetStatisticsRes" +
            "ponse")]
        TechControl.ServiceReferenceTrackPeriods.SpicTrackPeriodsMileageStatisticsResult GetStatistics(TechControl.ServiceReferenceTrackPeriods.SpicStatisticsSession session);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISpicSoapTrackPeriodsMileageStatisticsService/GetStatistics", ReplyAction="http://tempuri.org/ISpicSoapTrackPeriodsMileageStatisticsService/GetStatisticsRes" +
            "ponse")]
        System.Threading.Tasks.Task<TechControl.ServiceReferenceTrackPeriods.SpicTrackPeriodsMileageStatisticsResult> GetStatisticsAsync(TechControl.ServiceReferenceTrackPeriods.SpicStatisticsSession session);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISpicSoapTrackPeriodsMileageStatisticsServiceChannel : TechControl.ServiceReferenceTrackPeriods.ISpicSoapTrackPeriodsMileageStatisticsService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SpicSoapTrackPeriodsMileageStatisticsServiceClient : System.ServiceModel.ClientBase<TechControl.ServiceReferenceTrackPeriods.ISpicSoapTrackPeriodsMileageStatisticsService>, TechControl.ServiceReferenceTrackPeriods.ISpicSoapTrackPeriodsMileageStatisticsService {
        
        public SpicSoapTrackPeriodsMileageStatisticsServiceClient() {
        }
        
        public SpicSoapTrackPeriodsMileageStatisticsServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public SpicSoapTrackPeriodsMileageStatisticsServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SpicSoapTrackPeriodsMileageStatisticsServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SpicSoapTrackPeriodsMileageStatisticsServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public TechControl.ServiceReferenceTrackPeriods.SpicAddonStatisticsResult AddStatisticsRequest(TechControl.ServiceReferenceTrackPeriods.SpicStatisticsSession session) {
            return base.Channel.AddStatisticsRequest(session);
        }
        
        public System.Threading.Tasks.Task<TechControl.ServiceReferenceTrackPeriods.SpicAddonStatisticsResult> AddStatisticsRequestAsync(TechControl.ServiceReferenceTrackPeriods.SpicStatisticsSession session) {
            return base.Channel.AddStatisticsRequestAsync(session);
        }
        
        public TechControl.ServiceReferenceTrackPeriods.SpicTrackPeriodsMileageStatisticsResult GetStatistics(TechControl.ServiceReferenceTrackPeriods.SpicStatisticsSession session) {
            return base.Channel.GetStatistics(session);
        }
        
        public System.Threading.Tasks.Task<TechControl.ServiceReferenceTrackPeriods.SpicTrackPeriodsMileageStatisticsResult> GetStatisticsAsync(TechControl.ServiceReferenceTrackPeriods.SpicStatisticsSession session) {
            return base.Channel.GetStatisticsAsync(session);
        }
    }
}
