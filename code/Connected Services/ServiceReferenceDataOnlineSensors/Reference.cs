//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TechControl.ServiceReferenceDataOnlineSensors {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SpicOnlineDataWithSensorsSubscriptionRequest", Namespace="http://schemas.datacontract.org/2004/07/Scout.Plugins.Spic.Server.SpicOnlineDataW" +
        "ithSensors.Contracts")]
    [System.SerializableAttribute()]
    public partial class SpicOnlineDataWithSensorsSubscriptionRequest : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ushort[] SensorTypesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int[] UnitIdsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ushort[] SensorTypes {
            get {
                return this.SensorTypesField;
            }
            set {
                if ((object.ReferenceEquals(this.SensorTypesField, value) != true)) {
                    this.SensorTypesField = value;
                    this.RaisePropertyChanged("SensorTypes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int[] UnitIds {
            get {
                return this.UnitIdsField;
            }
            set {
                if ((object.ReferenceEquals(this.UnitIdsField, value) != true)) {
                    this.UnitIdsField = value;
                    this.RaisePropertyChanged("UnitIds");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SpicOnlineDataWithSensorsSubscriptionResponse", Namespace="http://schemas.datacontract.org/2004/07/Scout.Plugins.Spic.Server.SpicOnlineDataW" +
        "ithSensors.Contracts")]
    [System.SerializableAttribute()]
    public partial class SpicOnlineDataWithSensorsSubscriptionResponse : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<TechControl.ServiceReferenceDataOnlineSensors.SpicOnlineDataWithSensorsSessionId> SessionIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private TechControl.ServiceReferenceDataOnlineSensors.SpicOnlineDataWithSensorsOperationState StateField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<TechControl.ServiceReferenceDataOnlineSensors.SpicOnlineDataWithSensorsSessionId> SessionId {
            get {
                return this.SessionIdField;
            }
            set {
                if ((this.SessionIdField.Equals(value) != true)) {
                    this.SessionIdField = value;
                    this.RaisePropertyChanged("SessionId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TechControl.ServiceReferenceDataOnlineSensors.SpicOnlineDataWithSensorsOperationState State {
            get {
                return this.StateField;
            }
            set {
                if ((object.ReferenceEquals(this.StateField, value) != true)) {
                    this.StateField = value;
                    this.RaisePropertyChanged("State");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SpicOnlineDataWithSensorsSessionId", Namespace="http://schemas.datacontract.org/2004/07/Scout.Plugins.Spic.Server.SpicOnlineDataW" +
        "ithSensors.Contracts")]
    [System.SerializableAttribute()]
    public partial struct SpicOnlineDataWithSensorsSessionId : System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid IdField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SpicOnlineDataWithSensorsOperationState", Namespace="http://schemas.datacontract.org/2004/07/Scout.Plugins.Spic.Server.SpicOnlineDataW" +
        "ithSensors.Contracts")]
    [System.SerializableAttribute()]
    public partial class SpicOnlineDataWithSensorsOperationState : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int[] ErrorCodesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private TechControl.ServiceReferenceDataOnlineSensors.SpicOnlineDataWithSensorsOperationStatus StatusField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int[] ErrorCodes {
            get {
                return this.ErrorCodesField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorCodesField, value) != true)) {
                    this.ErrorCodesField = value;
                    this.RaisePropertyChanged("ErrorCodes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TechControl.ServiceReferenceDataOnlineSensors.SpicOnlineDataWithSensorsOperationStatus Status {
            get {
                return this.StatusField;
            }
            set {
                if ((this.StatusField.Equals(value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SpicOnlineDataWithSensorsOperationStatus", Namespace="http://schemas.datacontract.org/2004/07/Scout.Plugins.Spic.Server.SpicOnlineDataW" +
        "ithSensors.Contracts")]
    [System.SerializableAttribute()]
    public partial struct SpicOnlineDataWithSensorsOperationStatus : System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ValueField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Value {
            get {
                return this.ValueField;
            }
            set {
                if ((object.ReferenceEquals(this.ValueField, value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SpicOnlineDataWithSensorsResponse", Namespace="http://schemas.datacontract.org/2004/07/Scout.Plugins.Spic.Server.SpicOnlineDataW" +
        "ithSensors.Contracts")]
    [System.SerializableAttribute()]
    public partial class SpicOnlineDataWithSensorsResponse : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private TechControl.ServiceReferenceDataOnlineSensors.SpicOnlineDataWithSensorsCollection OnlineDataWithSensorsCollectionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private TechControl.ServiceReferenceDataOnlineSensors.SpicOnlineDataWithSensorsOperationState StateField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TechControl.ServiceReferenceDataOnlineSensors.SpicOnlineDataWithSensorsCollection OnlineDataWithSensorsCollection {
            get {
                return this.OnlineDataWithSensorsCollectionField;
            }
            set {
                if ((object.ReferenceEquals(this.OnlineDataWithSensorsCollectionField, value) != true)) {
                    this.OnlineDataWithSensorsCollectionField = value;
                    this.RaisePropertyChanged("OnlineDataWithSensorsCollection");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TechControl.ServiceReferenceDataOnlineSensors.SpicOnlineDataWithSensorsOperationState State {
            get {
                return this.StateField;
            }
            set {
                if ((object.ReferenceEquals(this.StateField, value) != true)) {
                    this.StateField = value;
                    this.RaisePropertyChanged("State");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SpicOnlineDataWithSensorsCollection", Namespace="http://schemas.datacontract.org/2004/07/Scout.Plugins.Spic.Server.SpicOnlineDataW" +
        "ithSensors.Contracts")]
    [System.SerializableAttribute()]
    public partial class SpicOnlineDataWithSensorsCollection : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private TechControl.ServiceReferenceDataOnlineSensors.SpicOnlineDataWithSensors[] DataCollectionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int[] TargetsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TechControl.ServiceReferenceDataOnlineSensors.SpicOnlineDataWithSensors[] DataCollection {
            get {
                return this.DataCollectionField;
            }
            set {
                if ((object.ReferenceEquals(this.DataCollectionField, value) != true)) {
                    this.DataCollectionField = value;
                    this.RaisePropertyChanged("DataCollection");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int[] Targets {
            get {
                return this.TargetsField;
            }
            set {
                if ((object.ReferenceEquals(this.TargetsField, value) != true)) {
                    this.TargetsField = value;
                    this.RaisePropertyChanged("Targets");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SpicOnlineDataWithSensors", Namespace="http://schemas.datacontract.org/2004/07/Scout.Plugins.Spic.Server.SpicOnlineDataW" +
        "ithSensors.Contracts")]
    [System.SerializableAttribute()]
    public partial class SpicOnlineDataWithSensors : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AddressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> ConnectionDateTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private TechControl.ServiceReferenceDataOnlineSensors.SpicDeviceId DeviceIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsNavigationValidField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> LastMessageTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private TechControl.ServiceReferenceDataOnlineSensors.SpicNavigation NavigationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> NavigationTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private TechControl.ServiceReferenceDataOnlineSensors.SpicSensor[] SensorsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TotalMessagesField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Address {
            get {
                return this.AddressField;
            }
            set {
                if ((object.ReferenceEquals(this.AddressField, value) != true)) {
                    this.AddressField = value;
                    this.RaisePropertyChanged("Address");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> ConnectionDateTime {
            get {
                return this.ConnectionDateTimeField;
            }
            set {
                if ((this.ConnectionDateTimeField.Equals(value) != true)) {
                    this.ConnectionDateTimeField = value;
                    this.RaisePropertyChanged("ConnectionDateTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TechControl.ServiceReferenceDataOnlineSensors.SpicDeviceId DeviceId {
            get {
                return this.DeviceIdField;
            }
            set {
                if ((this.DeviceIdField.Equals(value) != true)) {
                    this.DeviceIdField = value;
                    this.RaisePropertyChanged("DeviceId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsNavigationValid {
            get {
                return this.IsNavigationValidField;
            }
            set {
                if ((this.IsNavigationValidField.Equals(value) != true)) {
                    this.IsNavigationValidField = value;
                    this.RaisePropertyChanged("IsNavigationValid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> LastMessageTime {
            get {
                return this.LastMessageTimeField;
            }
            set {
                if ((this.LastMessageTimeField.Equals(value) != true)) {
                    this.LastMessageTimeField = value;
                    this.RaisePropertyChanged("LastMessageTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TechControl.ServiceReferenceDataOnlineSensors.SpicNavigation Navigation {
            get {
                return this.NavigationField;
            }
            set {
                if ((object.ReferenceEquals(this.NavigationField, value) != true)) {
                    this.NavigationField = value;
                    this.RaisePropertyChanged("Navigation");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> NavigationTime {
            get {
                return this.NavigationTimeField;
            }
            set {
                if ((this.NavigationTimeField.Equals(value) != true)) {
                    this.NavigationTimeField = value;
                    this.RaisePropertyChanged("NavigationTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TechControl.ServiceReferenceDataOnlineSensors.SpicSensor[] Sensors {
            get {
                return this.SensorsField;
            }
            set {
                if ((object.ReferenceEquals(this.SensorsField, value) != true)) {
                    this.SensorsField = value;
                    this.RaisePropertyChanged("Sensors");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TotalMessages {
            get {
                return this.TotalMessagesField;
            }
            set {
                if ((this.TotalMessagesField.Equals(value) != true)) {
                    this.TotalMessagesField = value;
                    this.RaisePropertyChanged("TotalMessages");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SpicDeviceId", Namespace="http://schemas.datacontract.org/2004/07/Scout.Plugins.Spic.Server.Infrastructure." +
        "Data")]
    [System.SerializableAttribute()]
    public partial struct SpicDeviceId : System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private TechControl.ServiceReferenceDataOnlineSensors.SpicDeviceProtocolCode ProtocolField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SerialIdField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TechControl.ServiceReferenceDataOnlineSensors.SpicDeviceProtocolCode Protocol {
            get {
                return this.ProtocolField;
            }
            set {
                if ((this.ProtocolField.Equals(value) != true)) {
                    this.ProtocolField = value;
                    this.RaisePropertyChanged("Protocol");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SerialId {
            get {
                return this.SerialIdField;
            }
            set {
                if ((object.ReferenceEquals(this.SerialIdField, value) != true)) {
                    this.SerialIdField = value;
                    this.RaisePropertyChanged("SerialId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SpicNavigation", Namespace="http://schemas.datacontract.org/2004/07/Scout.Plugins.Spic.Server.Statistics.Spic" +
        "NavigationFiltrationStat")]
    [System.SerializableAttribute()]
    public partial class SpicNavigation : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<double> AltitudeMetersField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<short> AngleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> HardwareValidationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private TechControl.ServiceReferenceDataOnlineSensors.SpicLocation LocationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NavigationSystemTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<byte> SatellitesCountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<double> SpeedField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<double> AltitudeMeters {
            get {
                return this.AltitudeMetersField;
            }
            set {
                if ((this.AltitudeMetersField.Equals(value) != true)) {
                    this.AltitudeMetersField = value;
                    this.RaisePropertyChanged("AltitudeMeters");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<short> Angle {
            get {
                return this.AngleField;
            }
            set {
                if ((this.AngleField.Equals(value) != true)) {
                    this.AngleField = value;
                    this.RaisePropertyChanged("Angle");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<bool> HardwareValidation {
            get {
                return this.HardwareValidationField;
            }
            set {
                if ((this.HardwareValidationField.Equals(value) != true)) {
                    this.HardwareValidationField = value;
                    this.RaisePropertyChanged("HardwareValidation");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TechControl.ServiceReferenceDataOnlineSensors.SpicLocation Location {
            get {
                return this.LocationField;
            }
            set {
                if ((object.ReferenceEquals(this.LocationField, value) != true)) {
                    this.LocationField = value;
                    this.RaisePropertyChanged("Location");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NavigationSystemType {
            get {
                return this.NavigationSystemTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.NavigationSystemTypeField, value) != true)) {
                    this.NavigationSystemTypeField = value;
                    this.RaisePropertyChanged("NavigationSystemType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<byte> SatellitesCount {
            get {
                return this.SatellitesCountField;
            }
            set {
                if ((this.SatellitesCountField.Equals(value) != true)) {
                    this.SatellitesCountField = value;
                    this.RaisePropertyChanged("SatellitesCount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<double> Speed {
            get {
                return this.SpeedField;
            }
            set {
                if ((this.SpeedField.Equals(value) != true)) {
                    this.SpeedField = value;
                    this.RaisePropertyChanged("Speed");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SpicSensor", Namespace="http://schemas.datacontract.org/2004/07/Scout.Plugins.Spic.Server.SpicOnlineDataW" +
        "ithSensors.Contracts")]
    [System.SerializableAttribute()]
    public partial class SpicSensor : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ushort SensorNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ushort SensorTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SensorValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ushort SensorNumber {
            get {
                return this.SensorNumberField;
            }
            set {
                if ((this.SensorNumberField.Equals(value) != true)) {
                    this.SensorNumberField = value;
                    this.RaisePropertyChanged("SensorNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ushort SensorType {
            get {
                return this.SensorTypeField;
            }
            set {
                if ((this.SensorTypeField.Equals(value) != true)) {
                    this.SensorTypeField = value;
                    this.RaisePropertyChanged("SensorType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SensorValue {
            get {
                return this.SensorValueField;
            }
            set {
                if ((object.ReferenceEquals(this.SensorValueField, value) != true)) {
                    this.SensorValueField = value;
                    this.RaisePropertyChanged("SensorValue");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SpicDeviceProtocolCode", Namespace="http://schemas.datacontract.org/2004/07/Scout.Plugins.Spic.Server.Infrastructure." +
        "Data")]
    [System.SerializableAttribute()]
    public partial struct SpicDeviceProtocolCode : System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ValueField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Value {
            get {
                return this.ValueField;
            }
            set {
                if ((object.ReferenceEquals(this.ValueField, value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SpicLocation", Namespace="http://schemas.datacontract.org/2004/07/Scout.Plugins.Spic.Server.Statistics.Spic" +
        "NavigationFiltrationStat")]
    [System.SerializableAttribute()]
    public partial class SpicLocation : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double LatitudeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double LongitudeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Latitude {
            get {
                return this.LatitudeField;
            }
            set {
                if ((this.LatitudeField.Equals(value) != true)) {
                    this.LatitudeField = value;
                    this.RaisePropertyChanged("Latitude");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Longitude {
            get {
                return this.LongitudeField;
            }
            set {
                if ((this.LongitudeField.Equals(value) != true)) {
                    this.LongitudeField = value;
                    this.RaisePropertyChanged("Longitude");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReferenceDataOnlineSensors.ISpicSoapOnlineDataWithSensorsService")]
    public interface ISpicSoapOnlineDataWithSensorsService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISpicSoapOnlineDataWithSensorsService/Subscribe", ReplyAction="http://tempuri.org/ISpicSoapOnlineDataWithSensorsService/SubscribeResponse")]
        TechControl.ServiceReferenceDataOnlineSensors.SpicOnlineDataWithSensorsSubscriptionResponse Subscribe(TechControl.ServiceReferenceDataOnlineSensors.SpicOnlineDataWithSensorsSubscriptionRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISpicSoapOnlineDataWithSensorsService/Subscribe", ReplyAction="http://tempuri.org/ISpicSoapOnlineDataWithSensorsService/SubscribeResponse")]
        System.Threading.Tasks.Task<TechControl.ServiceReferenceDataOnlineSensors.SpicOnlineDataWithSensorsSubscriptionResponse> SubscribeAsync(TechControl.ServiceReferenceDataOnlineSensors.SpicOnlineDataWithSensorsSubscriptionRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISpicSoapOnlineDataWithSensorsService/Unsubscribe", ReplyAction="http://tempuri.org/ISpicSoapOnlineDataWithSensorsService/UnsubscribeResponse")]
        TechControl.ServiceReferenceDataOnlineSensors.SpicOnlineDataWithSensorsOperationState Unsubscribe(TechControl.ServiceReferenceDataOnlineSensors.SpicOnlineDataWithSensorsSessionId onlineDataSessionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISpicSoapOnlineDataWithSensorsService/Unsubscribe", ReplyAction="http://tempuri.org/ISpicSoapOnlineDataWithSensorsService/UnsubscribeResponse")]
        System.Threading.Tasks.Task<TechControl.ServiceReferenceDataOnlineSensors.SpicOnlineDataWithSensorsOperationState> UnsubscribeAsync(TechControl.ServiceReferenceDataOnlineSensors.SpicOnlineDataWithSensorsSessionId onlineDataSessionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISpicSoapOnlineDataWithSensorsService/GetOnlineData", ReplyAction="http://tempuri.org/ISpicSoapOnlineDataWithSensorsService/GetOnlineDataResponse")]
        TechControl.ServiceReferenceDataOnlineSensors.SpicOnlineDataWithSensorsResponse GetOnlineData(TechControl.ServiceReferenceDataOnlineSensors.SpicOnlineDataWithSensorsSessionId onlineDataSessionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISpicSoapOnlineDataWithSensorsService/GetOnlineData", ReplyAction="http://tempuri.org/ISpicSoapOnlineDataWithSensorsService/GetOnlineDataResponse")]
        System.Threading.Tasks.Task<TechControl.ServiceReferenceDataOnlineSensors.SpicOnlineDataWithSensorsResponse> GetOnlineDataAsync(TechControl.ServiceReferenceDataOnlineSensors.SpicOnlineDataWithSensorsSessionId onlineDataSessionId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISpicSoapOnlineDataWithSensorsServiceChannel : TechControl.ServiceReferenceDataOnlineSensors.ISpicSoapOnlineDataWithSensorsService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SpicSoapOnlineDataWithSensorsServiceClient : System.ServiceModel.ClientBase<TechControl.ServiceReferenceDataOnlineSensors.ISpicSoapOnlineDataWithSensorsService>, TechControl.ServiceReferenceDataOnlineSensors.ISpicSoapOnlineDataWithSensorsService {
        
        public SpicSoapOnlineDataWithSensorsServiceClient() {
        }
        
        public SpicSoapOnlineDataWithSensorsServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public SpicSoapOnlineDataWithSensorsServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SpicSoapOnlineDataWithSensorsServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SpicSoapOnlineDataWithSensorsServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public TechControl.ServiceReferenceDataOnlineSensors.SpicOnlineDataWithSensorsSubscriptionResponse Subscribe(TechControl.ServiceReferenceDataOnlineSensors.SpicOnlineDataWithSensorsSubscriptionRequest request) {
            return base.Channel.Subscribe(request);
        }
        
        public System.Threading.Tasks.Task<TechControl.ServiceReferenceDataOnlineSensors.SpicOnlineDataWithSensorsSubscriptionResponse> SubscribeAsync(TechControl.ServiceReferenceDataOnlineSensors.SpicOnlineDataWithSensorsSubscriptionRequest request) {
            return base.Channel.SubscribeAsync(request);
        }
        
        public TechControl.ServiceReferenceDataOnlineSensors.SpicOnlineDataWithSensorsOperationState Unsubscribe(TechControl.ServiceReferenceDataOnlineSensors.SpicOnlineDataWithSensorsSessionId onlineDataSessionId) {
            return base.Channel.Unsubscribe(onlineDataSessionId);
        }
        
        public System.Threading.Tasks.Task<TechControl.ServiceReferenceDataOnlineSensors.SpicOnlineDataWithSensorsOperationState> UnsubscribeAsync(TechControl.ServiceReferenceDataOnlineSensors.SpicOnlineDataWithSensorsSessionId onlineDataSessionId) {
            return base.Channel.UnsubscribeAsync(onlineDataSessionId);
        }
        
        public TechControl.ServiceReferenceDataOnlineSensors.SpicOnlineDataWithSensorsResponse GetOnlineData(TechControl.ServiceReferenceDataOnlineSensors.SpicOnlineDataWithSensorsSessionId onlineDataSessionId) {
            return base.Channel.GetOnlineData(onlineDataSessionId);
        }
        
        public System.Threading.Tasks.Task<TechControl.ServiceReferenceDataOnlineSensors.SpicOnlineDataWithSensorsResponse> GetOnlineDataAsync(TechControl.ServiceReferenceDataOnlineSensors.SpicOnlineDataWithSensorsSessionId onlineDataSessionId) {
            return base.Channel.GetOnlineDataAsync(onlineDataSessionId);
        }
    }
}
