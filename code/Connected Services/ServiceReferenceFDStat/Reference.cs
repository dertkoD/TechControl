//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TechControl.ServiceReferenceFDStat {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SpicStatisticsSession", Namespace="http://schemas.datacontract.org/2004/07/Scout.Plugins.Spic.Server.Statistics.Cont" +
        "roller")]
    [System.SerializableAttribute()]
    public partial class SpicStatisticsSession : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid StatisticsSessionIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid StatisticsSessionId {
            get {
                return this.StatisticsSessionIdField;
            }
            set {
                if ((this.StatisticsSessionIdField.Equals(value) != true)) {
                    this.StatisticsSessionIdField = value;
                    this.RaisePropertyChanged("StatisticsSessionId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SpicAddonStatisticsResult", Namespace="http://schemas.datacontract.org/2004/07/Scout.Plugins.Spic.Server.Statistics.Conc" +
        "rete")]
    [System.SerializableAttribute()]
    public partial class SpicAddonStatisticsResult : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ErrorTextField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private TechControl.ServiceReferenceFDStat.SpicStatisticsOperationResult StatusField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ErrorText {
            get {
                return this.ErrorTextField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorTextField, value) != true)) {
                    this.ErrorTextField = value;
                    this.RaisePropertyChanged("ErrorText");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TechControl.ServiceReferenceFDStat.SpicStatisticsOperationResult Status {
            get {
                return this.StatusField;
            }
            set {
                if ((object.ReferenceEquals(this.StatusField, value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SpicStatisticsOperationResult", Namespace="http://schemas.datacontract.org/2004/07/Scout.Plugins.Spic.Server.Infrastructure." +
        "Data")]
    [System.SerializableAttribute()]
    public partial class SpicStatisticsOperationResult : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Value {
            get {
                return this.ValueField;
            }
            set {
                if ((object.ReferenceEquals(this.ValueField, value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SpicFuelingDefuelingStatisticsResult", Namespace="http://schemas.datacontract.org/2004/07/Scout.Plugins.Spic.Server.Statistics.Fuel" +
        "ingDefuelingStat")]
    [System.SerializableAttribute()]
    public partial class SpicFuelingDefuelingStatisticsResult : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private TechControl.ServiceReferenceFDStat.SpicStatisticsChunkInfo ChunkInfoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private TechControl.ServiceReferenceFDStat.SpicFuelingDefuelingStatistics StatisticsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TechControl.ServiceReferenceFDStat.SpicStatisticsChunkInfo ChunkInfo {
            get {
                return this.ChunkInfoField;
            }
            set {
                if ((object.ReferenceEquals(this.ChunkInfoField, value) != true)) {
                    this.ChunkInfoField = value;
                    this.RaisePropertyChanged("ChunkInfo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TechControl.ServiceReferenceFDStat.SpicFuelingDefuelingStatistics Statistics {
            get {
                return this.StatisticsField;
            }
            set {
                if ((object.ReferenceEquals(this.StatisticsField, value) != true)) {
                    this.StatisticsField = value;
                    this.RaisePropertyChanged("Statistics");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SpicStatisticsChunkInfo", Namespace="http://schemas.datacontract.org/2004/07/Scout.Plugins.Spic.Server.Statistics.Conc" +
        "rete")]
    [System.SerializableAttribute()]
    public partial class SpicStatisticsChunkInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ChunkNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ErrorTextField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsFinalChunkField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private TechControl.ServiceReferenceFDStat.SpicDateTimeRange PeriodField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private TechControl.ServiceReferenceFDStat.SpicStatisticsOperationResult StatusField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ChunkNumber {
            get {
                return this.ChunkNumberField;
            }
            set {
                if ((this.ChunkNumberField.Equals(value) != true)) {
                    this.ChunkNumberField = value;
                    this.RaisePropertyChanged("ChunkNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ErrorText {
            get {
                return this.ErrorTextField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorTextField, value) != true)) {
                    this.ErrorTextField = value;
                    this.RaisePropertyChanged("ErrorText");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsFinalChunk {
            get {
                return this.IsFinalChunkField;
            }
            set {
                if ((this.IsFinalChunkField.Equals(value) != true)) {
                    this.IsFinalChunkField = value;
                    this.RaisePropertyChanged("IsFinalChunk");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TechControl.ServiceReferenceFDStat.SpicDateTimeRange Period {
            get {
                return this.PeriodField;
            }
            set {
                if ((object.ReferenceEquals(this.PeriodField, value) != true)) {
                    this.PeriodField = value;
                    this.RaisePropertyChanged("Period");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TechControl.ServiceReferenceFDStat.SpicStatisticsOperationResult Status {
            get {
                return this.StatusField;
            }
            set {
                if ((object.ReferenceEquals(this.StatusField, value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SpicFuelingDefuelingStatistics", Namespace="http://schemas.datacontract.org/2004/07/Scout.Plugins.Spic.Server.Statistics.Fuel" +
        "ingDefuelingStat")]
    [System.SerializableAttribute()]
    public partial class SpicFuelingDefuelingStatistics : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<double> BeginFuelVolumeLField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int DefuelingCountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<double> DefuelingTotalVolumeLField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<double> EndFuelVolumeLField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private TechControl.ServiceReferenceFDStat.SpicFuelingDefuelingStatisticsEvent[] EventsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int FuelingCountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<double> FuelingTotalVolumeLField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<double> MaxFuelVolumeLField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<double> MinFuelVolumeLField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<double> TotalFuelConsumptionLField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<double> BeginFuelVolumeL {
            get {
                return this.BeginFuelVolumeLField;
            }
            set {
                if ((this.BeginFuelVolumeLField.Equals(value) != true)) {
                    this.BeginFuelVolumeLField = value;
                    this.RaisePropertyChanged("BeginFuelVolumeL");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int DefuelingCount {
            get {
                return this.DefuelingCountField;
            }
            set {
                if ((this.DefuelingCountField.Equals(value) != true)) {
                    this.DefuelingCountField = value;
                    this.RaisePropertyChanged("DefuelingCount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<double> DefuelingTotalVolumeL {
            get {
                return this.DefuelingTotalVolumeLField;
            }
            set {
                if ((this.DefuelingTotalVolumeLField.Equals(value) != true)) {
                    this.DefuelingTotalVolumeLField = value;
                    this.RaisePropertyChanged("DefuelingTotalVolumeL");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<double> EndFuelVolumeL {
            get {
                return this.EndFuelVolumeLField;
            }
            set {
                if ((this.EndFuelVolumeLField.Equals(value) != true)) {
                    this.EndFuelVolumeLField = value;
                    this.RaisePropertyChanged("EndFuelVolumeL");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TechControl.ServiceReferenceFDStat.SpicFuelingDefuelingStatisticsEvent[] Events {
            get {
                return this.EventsField;
            }
            set {
                if ((object.ReferenceEquals(this.EventsField, value) != true)) {
                    this.EventsField = value;
                    this.RaisePropertyChanged("Events");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int FuelingCount {
            get {
                return this.FuelingCountField;
            }
            set {
                if ((this.FuelingCountField.Equals(value) != true)) {
                    this.FuelingCountField = value;
                    this.RaisePropertyChanged("FuelingCount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<double> FuelingTotalVolumeL {
            get {
                return this.FuelingTotalVolumeLField;
            }
            set {
                if ((this.FuelingTotalVolumeLField.Equals(value) != true)) {
                    this.FuelingTotalVolumeLField = value;
                    this.RaisePropertyChanged("FuelingTotalVolumeL");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<double> MaxFuelVolumeL {
            get {
                return this.MaxFuelVolumeLField;
            }
            set {
                if ((this.MaxFuelVolumeLField.Equals(value) != true)) {
                    this.MaxFuelVolumeLField = value;
                    this.RaisePropertyChanged("MaxFuelVolumeL");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<double> MinFuelVolumeL {
            get {
                return this.MinFuelVolumeLField;
            }
            set {
                if ((this.MinFuelVolumeLField.Equals(value) != true)) {
                    this.MinFuelVolumeLField = value;
                    this.RaisePropertyChanged("MinFuelVolumeL");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<double> TotalFuelConsumptionL {
            get {
                return this.TotalFuelConsumptionLField;
            }
            set {
                if ((this.TotalFuelConsumptionLField.Equals(value) != true)) {
                    this.TotalFuelConsumptionLField = value;
                    this.RaisePropertyChanged("TotalFuelConsumptionL");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SpicDateTimeRange", Namespace="http://schemas.datacontract.org/2004/07/Scout.Plugins.Spic.Server.Infrastructure." +
        "Data")]
    [System.SerializableAttribute()]
    public partial class SpicDateTimeRange : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime BeginField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime EndField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Begin {
            get {
                return this.BeginField;
            }
            set {
                if ((this.BeginField.Equals(value) != true)) {
                    this.BeginField = value;
                    this.RaisePropertyChanged("Begin");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime End {
            get {
                return this.EndField;
            }
            set {
                if ((this.EndField.Equals(value) != true)) {
                    this.EndField = value;
                    this.RaisePropertyChanged("End");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SpicFuelingDefuelingStatisticsEvent", Namespace="http://schemas.datacontract.org/2004/07/Scout.Plugins.Spic.Server.Statistics.Fuel" +
        "ingDefuelingStat")]
    [System.SerializableAttribute()]
    public partial class SpicFuelingDefuelingStatisticsEvent : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double BeginFuelVolumeLField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double EndFuelVolumeLField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private TechControl.ServiceReferenceFDStat.SpicFdStatisticsFuelEventType EventTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private TechControl.ServiceReferenceFDStat.SpicLocation LocationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<double> OriginalBeginFuelVolumeLField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<double> OriginalEndFuelVolumeLField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private TechControl.ServiceReferenceFDStat.SpicDateTimeRange OriginalPeriodField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private TechControl.ServiceReferenceFDStat.SpicDateTimeRange PeriodField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime TimestampField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double BeginFuelVolumeL {
            get {
                return this.BeginFuelVolumeLField;
            }
            set {
                if ((this.BeginFuelVolumeLField.Equals(value) != true)) {
                    this.BeginFuelVolumeLField = value;
                    this.RaisePropertyChanged("BeginFuelVolumeL");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double EndFuelVolumeL {
            get {
                return this.EndFuelVolumeLField;
            }
            set {
                if ((this.EndFuelVolumeLField.Equals(value) != true)) {
                    this.EndFuelVolumeLField = value;
                    this.RaisePropertyChanged("EndFuelVolumeL");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TechControl.ServiceReferenceFDStat.SpicFdStatisticsFuelEventType EventType {
            get {
                return this.EventTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.EventTypeField, value) != true)) {
                    this.EventTypeField = value;
                    this.RaisePropertyChanged("EventType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TechControl.ServiceReferenceFDStat.SpicLocation Location {
            get {
                return this.LocationField;
            }
            set {
                if ((object.ReferenceEquals(this.LocationField, value) != true)) {
                    this.LocationField = value;
                    this.RaisePropertyChanged("Location");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<double> OriginalBeginFuelVolumeL {
            get {
                return this.OriginalBeginFuelVolumeLField;
            }
            set {
                if ((this.OriginalBeginFuelVolumeLField.Equals(value) != true)) {
                    this.OriginalBeginFuelVolumeLField = value;
                    this.RaisePropertyChanged("OriginalBeginFuelVolumeL");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<double> OriginalEndFuelVolumeL {
            get {
                return this.OriginalEndFuelVolumeLField;
            }
            set {
                if ((this.OriginalEndFuelVolumeLField.Equals(value) != true)) {
                    this.OriginalEndFuelVolumeLField = value;
                    this.RaisePropertyChanged("OriginalEndFuelVolumeL");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TechControl.ServiceReferenceFDStat.SpicDateTimeRange OriginalPeriod {
            get {
                return this.OriginalPeriodField;
            }
            set {
                if ((object.ReferenceEquals(this.OriginalPeriodField, value) != true)) {
                    this.OriginalPeriodField = value;
                    this.RaisePropertyChanged("OriginalPeriod");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TechControl.ServiceReferenceFDStat.SpicDateTimeRange Period {
            get {
                return this.PeriodField;
            }
            set {
                if ((object.ReferenceEquals(this.PeriodField, value) != true)) {
                    this.PeriodField = value;
                    this.RaisePropertyChanged("Period");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Timestamp {
            get {
                return this.TimestampField;
            }
            set {
                if ((this.TimestampField.Equals(value) != true)) {
                    this.TimestampField = value;
                    this.RaisePropertyChanged("Timestamp");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SpicFdStatisticsFuelEventType", Namespace="http://schemas.datacontract.org/2004/07/Scout.Plugins.Spic.Server.Statistics.Fuel" +
        "ingDefuelingStat")]
    [System.SerializableAttribute()]
    public partial class SpicFdStatisticsFuelEventType : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Value {
            get {
                return this.ValueField;
            }
            set {
                if ((object.ReferenceEquals(this.ValueField, value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SpicLocation", Namespace="http://schemas.datacontract.org/2004/07/Scout.Plugins.Spic.Server.Statistics.Spic" +
        "NavigationFiltrationStat")]
    [System.SerializableAttribute()]
    public partial class SpicLocation : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double LatitudeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double LongitudeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Latitude {
            get {
                return this.LatitudeField;
            }
            set {
                if ((this.LatitudeField.Equals(value) != true)) {
                    this.LatitudeField = value;
                    this.RaisePropertyChanged("Latitude");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Longitude {
            get {
                return this.LongitudeField;
            }
            set {
                if ((this.LongitudeField.Equals(value) != true)) {
                    this.LongitudeField = value;
                    this.RaisePropertyChanged("Longitude");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReferenceFDStat.ISpicSoapFuelingDefuelingStatisticsService")]
    public interface ISpicSoapFuelingDefuelingStatisticsService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISpicSoapFuelingDefuelingStatisticsService/AddStatisticsReques" +
            "t", ReplyAction="http://tempuri.org/ISpicSoapFuelingDefuelingStatisticsService/AddStatisticsReques" +
            "tResponse")]
        TechControl.ServiceReferenceFDStat.SpicAddonStatisticsResult AddStatisticsRequest(TechControl.ServiceReferenceFDStat.SpicStatisticsSession session);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISpicSoapFuelingDefuelingStatisticsService/AddStatisticsReques" +
            "t", ReplyAction="http://tempuri.org/ISpicSoapFuelingDefuelingStatisticsService/AddStatisticsReques" +
            "tResponse")]
        System.Threading.Tasks.Task<TechControl.ServiceReferenceFDStat.SpicAddonStatisticsResult> AddStatisticsRequestAsync(TechControl.ServiceReferenceFDStat.SpicStatisticsSession session);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISpicSoapFuelingDefuelingStatisticsService/GetStatistics", ReplyAction="http://tempuri.org/ISpicSoapFuelingDefuelingStatisticsService/GetStatisticsRespon" +
            "se")]
        TechControl.ServiceReferenceFDStat.SpicFuelingDefuelingStatisticsResult GetStatistics(TechControl.ServiceReferenceFDStat.SpicStatisticsSession session);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISpicSoapFuelingDefuelingStatisticsService/GetStatistics", ReplyAction="http://tempuri.org/ISpicSoapFuelingDefuelingStatisticsService/GetStatisticsRespon" +
            "se")]
        System.Threading.Tasks.Task<TechControl.ServiceReferenceFDStat.SpicFuelingDefuelingStatisticsResult> GetStatisticsAsync(TechControl.ServiceReferenceFDStat.SpicStatisticsSession session);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISpicSoapFuelingDefuelingStatisticsServiceChannel : TechControl.ServiceReferenceFDStat.ISpicSoapFuelingDefuelingStatisticsService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SpicSoapFuelingDefuelingStatisticsServiceClient : System.ServiceModel.ClientBase<TechControl.ServiceReferenceFDStat.ISpicSoapFuelingDefuelingStatisticsService>, TechControl.ServiceReferenceFDStat.ISpicSoapFuelingDefuelingStatisticsService {
        
        public SpicSoapFuelingDefuelingStatisticsServiceClient() {
        }
        
        public SpicSoapFuelingDefuelingStatisticsServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public SpicSoapFuelingDefuelingStatisticsServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SpicSoapFuelingDefuelingStatisticsServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SpicSoapFuelingDefuelingStatisticsServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public TechControl.ServiceReferenceFDStat.SpicAddonStatisticsResult AddStatisticsRequest(TechControl.ServiceReferenceFDStat.SpicStatisticsSession session) {
            return base.Channel.AddStatisticsRequest(session);
        }
        
        public System.Threading.Tasks.Task<TechControl.ServiceReferenceFDStat.SpicAddonStatisticsResult> AddStatisticsRequestAsync(TechControl.ServiceReferenceFDStat.SpicStatisticsSession session) {
            return base.Channel.AddStatisticsRequestAsync(session);
        }
        
        public TechControl.ServiceReferenceFDStat.SpicFuelingDefuelingStatisticsResult GetStatistics(TechControl.ServiceReferenceFDStat.SpicStatisticsSession session) {
            return base.Channel.GetStatistics(session);
        }
        
        public System.Threading.Tasks.Task<TechControl.ServiceReferenceFDStat.SpicFuelingDefuelingStatisticsResult> GetStatisticsAsync(TechControl.ServiceReferenceFDStat.SpicStatisticsSession session) {
            return base.Channel.GetStatisticsAsync(session);
        }
    }
}
