//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TechControl.SpicGeofenceService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SpicGeofenceCollection", Namespace="http://schemas.datacontract.org/2004/07/Scout.Platform.Components.Frontend.Spic.G" +
        "eofences.Data")]
    [System.SerializableAttribute()]
    public partial class SpicGeofenceCollection : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private TechControl.SpicGeofenceService.SpicGeofence[] SpicGeofencesField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TechControl.SpicGeofenceService.SpicGeofence[] SpicGeofences {
            get {
                return this.SpicGeofencesField;
            }
            set {
                if ((object.ReferenceEquals(this.SpicGeofencesField, value) != true)) {
                    this.SpicGeofencesField = value;
                    this.RaisePropertyChanged("SpicGeofences");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SpicGeofence", Namespace="http://schemas.datacontract.org/2004/07/Scout.Platform.Components.Frontend.Spic.G" +
        "eofences.Data")]
    [System.SerializableAttribute()]
    public partial class SpicGeofence : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string GeofenceNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string GroupNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string GeofenceName {
            get {
                return this.GeofenceNameField;
            }
            set {
                if ((object.ReferenceEquals(this.GeofenceNameField, value) != true)) {
                    this.GeofenceNameField = value;
                    this.RaisePropertyChanged("GeofenceName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string GroupName {
            get {
                return this.GroupNameField;
            }
            set {
                if ((object.ReferenceEquals(this.GroupNameField, value) != true)) {
                    this.GroupNameField = value;
                    this.RaisePropertyChanged("GroupName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="SpicGeofenceService.ISpicSoapGeofenceService")]
    public interface ISpicSoapGeofenceService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISpicSoapGeofenceService/GetAvailableGeofences", ReplyAction="http://tempuri.org/ISpicSoapGeofenceService/GetAvailableGeofencesResponse")]
        TechControl.SpicGeofenceService.SpicGeofenceCollection GetAvailableGeofences();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISpicSoapGeofenceService/GetAvailableGeofences", ReplyAction="http://tempuri.org/ISpicSoapGeofenceService/GetAvailableGeofencesResponse")]
        System.Threading.Tasks.Task<TechControl.SpicGeofenceService.SpicGeofenceCollection> GetAvailableGeofencesAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISpicSoapGeofenceServiceChannel : TechControl.SpicGeofenceService.ISpicSoapGeofenceService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SpicSoapGeofenceServiceClient : System.ServiceModel.ClientBase<TechControl.SpicGeofenceService.ISpicSoapGeofenceService>, TechControl.SpicGeofenceService.ISpicSoapGeofenceService {
        
        public SpicSoapGeofenceServiceClient() {
        }
        
        public SpicSoapGeofenceServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public SpicSoapGeofenceServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SpicSoapGeofenceServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SpicSoapGeofenceServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public TechControl.SpicGeofenceService.SpicGeofenceCollection GetAvailableGeofences() {
            return base.Channel.GetAvailableGeofences();
        }
        
        public System.Threading.Tasks.Task<TechControl.SpicGeofenceService.SpicGeofenceCollection> GetAvailableGeofencesAsync() {
            return base.Channel.GetAvailableGeofencesAsync();
        }
    }
}
