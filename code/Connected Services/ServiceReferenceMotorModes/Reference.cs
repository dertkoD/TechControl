//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TechControl.ServiceReferenceMotorModes {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SpicStatisticsSession", Namespace="http://schemas.datacontract.org/2004/07/Scout.Plugins.Spic.Server.Statistics.Cont" +
        "roller")]
    [System.SerializableAttribute()]
    public partial class SpicStatisticsSession : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid StatisticsSessionIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid StatisticsSessionId {
            get {
                return this.StatisticsSessionIdField;
            }
            set {
                if ((this.StatisticsSessionIdField.Equals(value) != true)) {
                    this.StatisticsSessionIdField = value;
                    this.RaisePropertyChanged("StatisticsSessionId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SpicAddonStatisticsResult", Namespace="http://schemas.datacontract.org/2004/07/Scout.Plugins.Spic.Server.Statistics.Conc" +
        "rete")]
    [System.SerializableAttribute()]
    public partial class SpicAddonStatisticsResult : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ErrorTextField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private TechControl.ServiceReferenceMotorModes.SpicStatisticsOperationResult StatusField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ErrorText {
            get {
                return this.ErrorTextField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorTextField, value) != true)) {
                    this.ErrorTextField = value;
                    this.RaisePropertyChanged("ErrorText");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TechControl.ServiceReferenceMotorModes.SpicStatisticsOperationResult Status {
            get {
                return this.StatusField;
            }
            set {
                if ((object.ReferenceEquals(this.StatusField, value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SpicStatisticsOperationResult", Namespace="http://schemas.datacontract.org/2004/07/Scout.Plugins.Spic.Server.Infrastructure." +
        "Data")]
    [System.SerializableAttribute()]
    public partial class SpicStatisticsOperationResult : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Value {
            get {
                return this.ValueField;
            }
            set {
                if ((object.ReferenceEquals(this.ValueField, value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SpicMotorModesStatisticsResult", Namespace="http://schemas.datacontract.org/2004/07/Scout.Plugins.Spic.Server.Statistics.Moto" +
        "rModesStat")]
    [System.SerializableAttribute()]
    public partial class SpicMotorModesStatisticsResult : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private TechControl.ServiceReferenceMotorModes.SpicStatisticsChunkInfo ChunkInfoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private TechControl.ServiceReferenceMotorModes.SpicMotorModesStatistics StatisticsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TechControl.ServiceReferenceMotorModes.SpicStatisticsChunkInfo ChunkInfo {
            get {
                return this.ChunkInfoField;
            }
            set {
                if ((object.ReferenceEquals(this.ChunkInfoField, value) != true)) {
                    this.ChunkInfoField = value;
                    this.RaisePropertyChanged("ChunkInfo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TechControl.ServiceReferenceMotorModes.SpicMotorModesStatistics Statistics {
            get {
                return this.StatisticsField;
            }
            set {
                if ((object.ReferenceEquals(this.StatisticsField, value) != true)) {
                    this.StatisticsField = value;
                    this.RaisePropertyChanged("Statistics");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SpicStatisticsChunkInfo", Namespace="http://schemas.datacontract.org/2004/07/Scout.Plugins.Spic.Server.Statistics.Conc" +
        "rete")]
    [System.SerializableAttribute()]
    public partial class SpicStatisticsChunkInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ChunkNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ErrorTextField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsFinalChunkField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private TechControl.ServiceReferenceMotorModes.SpicDateTimeRange PeriodField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private TechControl.ServiceReferenceMotorModes.SpicStatisticsOperationResult StatusField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ChunkNumber {
            get {
                return this.ChunkNumberField;
            }
            set {
                if ((this.ChunkNumberField.Equals(value) != true)) {
                    this.ChunkNumberField = value;
                    this.RaisePropertyChanged("ChunkNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ErrorText {
            get {
                return this.ErrorTextField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorTextField, value) != true)) {
                    this.ErrorTextField = value;
                    this.RaisePropertyChanged("ErrorText");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsFinalChunk {
            get {
                return this.IsFinalChunkField;
            }
            set {
                if ((this.IsFinalChunkField.Equals(value) != true)) {
                    this.IsFinalChunkField = value;
                    this.RaisePropertyChanged("IsFinalChunk");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TechControl.ServiceReferenceMotorModes.SpicDateTimeRange Period {
            get {
                return this.PeriodField;
            }
            set {
                if ((object.ReferenceEquals(this.PeriodField, value) != true)) {
                    this.PeriodField = value;
                    this.RaisePropertyChanged("Period");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TechControl.ServiceReferenceMotorModes.SpicStatisticsOperationResult Status {
            get {
                return this.StatusField;
            }
            set {
                if ((object.ReferenceEquals(this.StatusField, value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SpicMotorModesStatistics", Namespace="http://schemas.datacontract.org/2004/07/Scout.Plugins.Spic.Server.Statistics.Moto" +
        "rModesStat")]
    [System.SerializableAttribute()]
    public partial class SpicMotorModesStatistics : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.TimeSpan EngineActiveWorkHoursField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.TimeSpan EngineIdleHoursField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.TimeSpan EngineOffHoursField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.TimeSpan EngineOnHoursField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private TechControl.ServiceReferenceMotorModes.SpicMotorPeriod[] PeriodsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.TimeSpan EngineActiveWorkHours {
            get {
                return this.EngineActiveWorkHoursField;
            }
            set {
                if ((this.EngineActiveWorkHoursField.Equals(value) != true)) {
                    this.EngineActiveWorkHoursField = value;
                    this.RaisePropertyChanged("EngineActiveWorkHours");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.TimeSpan EngineIdleHours {
            get {
                return this.EngineIdleHoursField;
            }
            set {
                if ((this.EngineIdleHoursField.Equals(value) != true)) {
                    this.EngineIdleHoursField = value;
                    this.RaisePropertyChanged("EngineIdleHours");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.TimeSpan EngineOffHours {
            get {
                return this.EngineOffHoursField;
            }
            set {
                if ((this.EngineOffHoursField.Equals(value) != true)) {
                    this.EngineOffHoursField = value;
                    this.RaisePropertyChanged("EngineOffHours");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.TimeSpan EngineOnHours {
            get {
                return this.EngineOnHoursField;
            }
            set {
                if ((this.EngineOnHoursField.Equals(value) != true)) {
                    this.EngineOnHoursField = value;
                    this.RaisePropertyChanged("EngineOnHours");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TechControl.ServiceReferenceMotorModes.SpicMotorPeriod[] Periods {
            get {
                return this.PeriodsField;
            }
            set {
                if ((object.ReferenceEquals(this.PeriodsField, value) != true)) {
                    this.PeriodsField = value;
                    this.RaisePropertyChanged("Periods");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SpicDateTimeRange", Namespace="http://schemas.datacontract.org/2004/07/Scout.Plugins.Spic.Server.Infrastructure." +
        "Data")]
    [System.SerializableAttribute()]
    public partial class SpicDateTimeRange : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime BeginField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime EndField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Begin {
            get {
                return this.BeginField;
            }
            set {
                if ((this.BeginField.Equals(value) != true)) {
                    this.BeginField = value;
                    this.RaisePropertyChanged("Begin");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime End {
            get {
                return this.EndField;
            }
            set {
                if ((this.EndField.Equals(value) != true)) {
                    this.EndField = value;
                    this.RaisePropertyChanged("End");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SpicMotorPeriod", Namespace="http://schemas.datacontract.org/2004/07/Scout.Plugins.Spic.Server.Statistics.Moto" +
        "rModesStat")]
    [System.SerializableAttribute()]
    public partial class SpicMotorPeriod : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsActiveWorkField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsIgnitionOnField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private TechControl.ServiceReferenceMotorModes.SpicDateTimeRange PeriodField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private TechControl.ServiceReferenceMotorModes.SpicMotorPeriodType TypeIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsActiveWork {
            get {
                return this.IsActiveWorkField;
            }
            set {
                if ((this.IsActiveWorkField.Equals(value) != true)) {
                    this.IsActiveWorkField = value;
                    this.RaisePropertyChanged("IsActiveWork");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsIgnitionOn {
            get {
                return this.IsIgnitionOnField;
            }
            set {
                if ((this.IsIgnitionOnField.Equals(value) != true)) {
                    this.IsIgnitionOnField = value;
                    this.RaisePropertyChanged("IsIgnitionOn");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TechControl.ServiceReferenceMotorModes.SpicDateTimeRange Period {
            get {
                return this.PeriodField;
            }
            set {
                if ((object.ReferenceEquals(this.PeriodField, value) != true)) {
                    this.PeriodField = value;
                    this.RaisePropertyChanged("Period");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TechControl.ServiceReferenceMotorModes.SpicMotorPeriodType TypeId {
            get {
                return this.TypeIdField;
            }
            set {
                if ((object.ReferenceEquals(this.TypeIdField, value) != true)) {
                    this.TypeIdField = value;
                    this.RaisePropertyChanged("TypeId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SpicMotorPeriodType", Namespace="http://schemas.datacontract.org/2004/07/Scout.Plugins.Spic.Server.Statistics.Moto" +
        "rModesStat")]
    [System.SerializableAttribute()]
    public partial class SpicMotorPeriodType : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Value {
            get {
                return this.ValueField;
            }
            set {
                if ((object.ReferenceEquals(this.ValueField, value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReferenceMotorModes.ISpicSoapMotorModesStatisticsService")]
    public interface ISpicSoapMotorModesStatisticsService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISpicSoapMotorModesStatisticsService/AddStatisticsRequest", ReplyAction="http://tempuri.org/ISpicSoapMotorModesStatisticsService/AddStatisticsRequestRespo" +
            "nse")]
        TechControl.ServiceReferenceMotorModes.SpicAddonStatisticsResult AddStatisticsRequest(TechControl.ServiceReferenceMotorModes.SpicStatisticsSession session);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISpicSoapMotorModesStatisticsService/AddStatisticsRequest", ReplyAction="http://tempuri.org/ISpicSoapMotorModesStatisticsService/AddStatisticsRequestRespo" +
            "nse")]
        System.Threading.Tasks.Task<TechControl.ServiceReferenceMotorModes.SpicAddonStatisticsResult> AddStatisticsRequestAsync(TechControl.ServiceReferenceMotorModes.SpicStatisticsSession session);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISpicSoapMotorModesStatisticsService/GetStatistics", ReplyAction="http://tempuri.org/ISpicSoapMotorModesStatisticsService/GetStatisticsResponse")]
        TechControl.ServiceReferenceMotorModes.SpicMotorModesStatisticsResult GetStatistics(TechControl.ServiceReferenceMotorModes.SpicStatisticsSession session);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISpicSoapMotorModesStatisticsService/GetStatistics", ReplyAction="http://tempuri.org/ISpicSoapMotorModesStatisticsService/GetStatisticsResponse")]
        System.Threading.Tasks.Task<TechControl.ServiceReferenceMotorModes.SpicMotorModesStatisticsResult> GetStatisticsAsync(TechControl.ServiceReferenceMotorModes.SpicStatisticsSession session);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISpicSoapMotorModesStatisticsServiceChannel : TechControl.ServiceReferenceMotorModes.ISpicSoapMotorModesStatisticsService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SpicSoapMotorModesStatisticsServiceClient : System.ServiceModel.ClientBase<TechControl.ServiceReferenceMotorModes.ISpicSoapMotorModesStatisticsService>, TechControl.ServiceReferenceMotorModes.ISpicSoapMotorModesStatisticsService {
        
        public SpicSoapMotorModesStatisticsServiceClient() {
        }
        
        public SpicSoapMotorModesStatisticsServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public SpicSoapMotorModesStatisticsServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SpicSoapMotorModesStatisticsServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SpicSoapMotorModesStatisticsServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public TechControl.ServiceReferenceMotorModes.SpicAddonStatisticsResult AddStatisticsRequest(TechControl.ServiceReferenceMotorModes.SpicStatisticsSession session) {
            return base.Channel.AddStatisticsRequest(session);
        }
        
        public System.Threading.Tasks.Task<TechControl.ServiceReferenceMotorModes.SpicAddonStatisticsResult> AddStatisticsRequestAsync(TechControl.ServiceReferenceMotorModes.SpicStatisticsSession session) {
            return base.Channel.AddStatisticsRequestAsync(session);
        }
        
        public TechControl.ServiceReferenceMotorModes.SpicMotorModesStatisticsResult GetStatistics(TechControl.ServiceReferenceMotorModes.SpicStatisticsSession session) {
            return base.Channel.GetStatistics(session);
        }
        
        public System.Threading.Tasks.Task<TechControl.ServiceReferenceMotorModes.SpicMotorModesStatisticsResult> GetStatisticsAsync(TechControl.ServiceReferenceMotorModes.SpicStatisticsSession session) {
            return base.Channel.GetStatisticsAsync(session);
        }
    }
}
