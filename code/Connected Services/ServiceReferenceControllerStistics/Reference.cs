//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TechControl.ServiceReferenceControllerStistics {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SpicStatisticsSessionRequest", Namespace="http://schemas.datacontract.org/2004/07/Scout.Plugins.Spic.Server.Statistics.Cont" +
        "roller")]
    [System.SerializableAttribute()]
    public partial class SpicStatisticsSessionRequest : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private TechControl.ServiceReferenceControllerStistics.SpicDateTimeRange PeriodField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private TechControl.ServiceReferenceControllerStistics.SpicObjectIdentity TargetObjectField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TechControl.ServiceReferenceControllerStistics.SpicDateTimeRange Period {
            get {
                return this.PeriodField;
            }
            set {
                if ((object.ReferenceEquals(this.PeriodField, value) != true)) {
                    this.PeriodField = value;
                    this.RaisePropertyChanged("Period");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TechControl.ServiceReferenceControllerStistics.SpicObjectIdentity TargetObject {
            get {
                return this.TargetObjectField;
            }
            set {
                if ((this.TargetObjectField.Equals(value) != true)) {
                    this.TargetObjectField = value;
                    this.RaisePropertyChanged("TargetObject");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SpicDateTimeRange", Namespace="http://schemas.datacontract.org/2004/07/Scout.Plugins.Spic.Server.Infrastructure." +
        "Data")]
    [System.SerializableAttribute()]
    public partial class SpicDateTimeRange : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime BeginField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime EndField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Begin {
            get {
                return this.BeginField;
            }
            set {
                if ((this.BeginField.Equals(value) != true)) {
                    this.BeginField = value;
                    this.RaisePropertyChanged("Begin");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime End {
            get {
                return this.EndField;
            }
            set {
                if ((this.EndField.Equals(value) != true)) {
                    this.EndField = value;
                    this.RaisePropertyChanged("End");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SpicObjectIdentity", Namespace="http://schemas.datacontract.org/2004/07/Scout.Plugins.Spic.Server.Infrastructure." +
        "Data")]
    [System.SerializableAttribute()]
    public partial struct SpicObjectIdentity : System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ObjectIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid ObjectTypeIdField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ObjectId {
            get {
                return this.ObjectIdField;
            }
            set {
                if ((this.ObjectIdField.Equals(value) != true)) {
                    this.ObjectIdField = value;
                    this.RaisePropertyChanged("ObjectId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid ObjectTypeId {
            get {
                return this.ObjectTypeIdField;
            }
            set {
                if ((this.ObjectTypeIdField.Equals(value) != true)) {
                    this.ObjectTypeIdField = value;
                    this.RaisePropertyChanged("ObjectTypeId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SpicStatisticsSessionResponse", Namespace="http://schemas.datacontract.org/2004/07/Scout.Plugins.Spic.Server.Statistics.Cont" +
        "roller")]
    [System.SerializableAttribute()]
    public partial class SpicStatisticsSessionResponse : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private TechControl.ServiceReferenceControllerStistics.SpicStatisticsOperationResult OperationResultField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private TechControl.ServiceReferenceControllerStistics.SpicStatisticsSession SessionField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TechControl.ServiceReferenceControllerStistics.SpicStatisticsOperationResult OperationResult {
            get {
                return this.OperationResultField;
            }
            set {
                if ((object.ReferenceEquals(this.OperationResultField, value) != true)) {
                    this.OperationResultField = value;
                    this.RaisePropertyChanged("OperationResult");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TechControl.ServiceReferenceControllerStistics.SpicStatisticsSession Session {
            get {
                return this.SessionField;
            }
            set {
                if ((object.ReferenceEquals(this.SessionField, value) != true)) {
                    this.SessionField = value;
                    this.RaisePropertyChanged("Session");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SpicStatisticsOperationResult", Namespace="http://schemas.datacontract.org/2004/07/Scout.Plugins.Spic.Server.Infrastructure." +
        "Data")]
    [System.SerializableAttribute()]
    public partial class SpicStatisticsOperationResult : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Value {
            get {
                return this.ValueField;
            }
            set {
                if ((object.ReferenceEquals(this.ValueField, value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SpicStatisticsSession", Namespace="http://schemas.datacontract.org/2004/07/Scout.Plugins.Spic.Server.Statistics.Cont" +
        "roller")]
    [System.SerializableAttribute()]
    public partial class SpicStatisticsSession : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid StatisticsSessionIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid StatisticsSessionId {
            get {
                return this.StatisticsSessionIdField;
            }
            set {
                if ((this.StatisticsSessionIdField.Equals(value) != true)) {
                    this.StatisticsSessionIdField = value;
                    this.RaisePropertyChanged("StatisticsSessionId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SpicStatisticsChunkInfo", Namespace="http://schemas.datacontract.org/2004/07/Scout.Plugins.Spic.Server.Statistics.Conc" +
        "rete")]
    [System.SerializableAttribute()]
    public partial class SpicStatisticsChunkInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ChunkNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ErrorTextField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsFinalChunkField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private TechControl.ServiceReferenceControllerStistics.SpicDateTimeRange PeriodField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private TechControl.ServiceReferenceControllerStistics.SpicStatisticsOperationResult StatusField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ChunkNumber {
            get {
                return this.ChunkNumberField;
            }
            set {
                if ((this.ChunkNumberField.Equals(value) != true)) {
                    this.ChunkNumberField = value;
                    this.RaisePropertyChanged("ChunkNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ErrorText {
            get {
                return this.ErrorTextField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorTextField, value) != true)) {
                    this.ErrorTextField = value;
                    this.RaisePropertyChanged("ErrorText");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsFinalChunk {
            get {
                return this.IsFinalChunkField;
            }
            set {
                if ((this.IsFinalChunkField.Equals(value) != true)) {
                    this.IsFinalChunkField = value;
                    this.RaisePropertyChanged("IsFinalChunk");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TechControl.ServiceReferenceControllerStistics.SpicDateTimeRange Period {
            get {
                return this.PeriodField;
            }
            set {
                if ((object.ReferenceEquals(this.PeriodField, value) != true)) {
                    this.PeriodField = value;
                    this.RaisePropertyChanged("Period");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TechControl.ServiceReferenceControllerStistics.SpicStatisticsOperationResult Status {
            get {
                return this.StatusField;
            }
            set {
                if ((object.ReferenceEquals(this.StatusField, value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReferenceControllerStistics.ISpicSoapStatisticsControllerService")]
    public interface ISpicSoapStatisticsControllerService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISpicSoapStatisticsControllerService/StartStatisticsSession", ReplyAction="http://tempuri.org/ISpicSoapStatisticsControllerService/StartStatisticsSessionRes" +
            "ponse")]
        TechControl.ServiceReferenceControllerStistics.SpicStatisticsSessionResponse StartStatisticsSession(TechControl.ServiceReferenceControllerStistics.SpicStatisticsSessionRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISpicSoapStatisticsControllerService/StartStatisticsSession", ReplyAction="http://tempuri.org/ISpicSoapStatisticsControllerService/StartStatisticsSessionRes" +
            "ponse")]
        System.Threading.Tasks.Task<TechControl.ServiceReferenceControllerStistics.SpicStatisticsSessionResponse> StartStatisticsSessionAsync(TechControl.ServiceReferenceControllerStistics.SpicStatisticsSessionRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISpicSoapStatisticsControllerService/StopStatisticsSession", ReplyAction="http://tempuri.org/ISpicSoapStatisticsControllerService/StopStatisticsSessionResp" +
            "onse")]
        TechControl.ServiceReferenceControllerStistics.SpicStatisticsOperationResult StopStatisticsSession(TechControl.ServiceReferenceControllerStistics.SpicStatisticsSession session);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISpicSoapStatisticsControllerService/StopStatisticsSession", ReplyAction="http://tempuri.org/ISpicSoapStatisticsControllerService/StopStatisticsSessionResp" +
            "onse")]
        System.Threading.Tasks.Task<TechControl.ServiceReferenceControllerStistics.SpicStatisticsOperationResult> StopStatisticsSessionAsync(TechControl.ServiceReferenceControllerStistics.SpicStatisticsSession session);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISpicSoapStatisticsControllerService/GetCurrentChunkInfo", ReplyAction="http://tempuri.org/ISpicSoapStatisticsControllerService/GetCurrentChunkInfoRespon" +
            "se")]
        TechControl.ServiceReferenceControllerStistics.SpicStatisticsChunkInfo GetCurrentChunkInfo(TechControl.ServiceReferenceControllerStistics.SpicStatisticsSession session);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISpicSoapStatisticsControllerService/GetCurrentChunkInfo", ReplyAction="http://tempuri.org/ISpicSoapStatisticsControllerService/GetCurrentChunkInfoRespon" +
            "se")]
        System.Threading.Tasks.Task<TechControl.ServiceReferenceControllerStistics.SpicStatisticsChunkInfo> GetCurrentChunkInfoAsync(TechControl.ServiceReferenceControllerStistics.SpicStatisticsSession session);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISpicSoapStatisticsControllerService/BuildNextChunk", ReplyAction="http://tempuri.org/ISpicSoapStatisticsControllerService/BuildNextChunkResponse")]
        TechControl.ServiceReferenceControllerStistics.SpicStatisticsOperationResult BuildNextChunk(TechControl.ServiceReferenceControllerStistics.SpicStatisticsSession session);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISpicSoapStatisticsControllerService/BuildNextChunk", ReplyAction="http://tempuri.org/ISpicSoapStatisticsControllerService/BuildNextChunkResponse")]
        System.Threading.Tasks.Task<TechControl.ServiceReferenceControllerStistics.SpicStatisticsOperationResult> BuildNextChunkAsync(TechControl.ServiceReferenceControllerStistics.SpicStatisticsSession session);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISpicSoapStatisticsControllerService/StartBuild", ReplyAction="http://tempuri.org/ISpicSoapStatisticsControllerService/StartBuildResponse")]
        TechControl.ServiceReferenceControllerStistics.SpicStatisticsOperationResult StartBuild(TechControl.ServiceReferenceControllerStistics.SpicStatisticsSession session);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISpicSoapStatisticsControllerService/StartBuild", ReplyAction="http://tempuri.org/ISpicSoapStatisticsControllerService/StartBuildResponse")]
        System.Threading.Tasks.Task<TechControl.ServiceReferenceControllerStistics.SpicStatisticsOperationResult> StartBuildAsync(TechControl.ServiceReferenceControllerStistics.SpicStatisticsSession session);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISpicSoapStatisticsControllerServiceChannel : TechControl.ServiceReferenceControllerStistics.ISpicSoapStatisticsControllerService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SpicSoapStatisticsControllerServiceClient : System.ServiceModel.ClientBase<TechControl.ServiceReferenceControllerStistics.ISpicSoapStatisticsControllerService>, TechControl.ServiceReferenceControllerStistics.ISpicSoapStatisticsControllerService {
        
        public SpicSoapStatisticsControllerServiceClient() {
        }
        
        public SpicSoapStatisticsControllerServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public SpicSoapStatisticsControllerServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SpicSoapStatisticsControllerServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SpicSoapStatisticsControllerServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public TechControl.ServiceReferenceControllerStistics.SpicStatisticsSessionResponse StartStatisticsSession(TechControl.ServiceReferenceControllerStistics.SpicStatisticsSessionRequest request) {
            return base.Channel.StartStatisticsSession(request);
        }
        
        public System.Threading.Tasks.Task<TechControl.ServiceReferenceControllerStistics.SpicStatisticsSessionResponse> StartStatisticsSessionAsync(TechControl.ServiceReferenceControllerStistics.SpicStatisticsSessionRequest request) {
            return base.Channel.StartStatisticsSessionAsync(request);
        }
        
        public TechControl.ServiceReferenceControllerStistics.SpicStatisticsOperationResult StopStatisticsSession(TechControl.ServiceReferenceControllerStistics.SpicStatisticsSession session) {
            return base.Channel.StopStatisticsSession(session);
        }
        
        public System.Threading.Tasks.Task<TechControl.ServiceReferenceControllerStistics.SpicStatisticsOperationResult> StopStatisticsSessionAsync(TechControl.ServiceReferenceControllerStistics.SpicStatisticsSession session) {
            return base.Channel.StopStatisticsSessionAsync(session);
        }
        
        public TechControl.ServiceReferenceControllerStistics.SpicStatisticsChunkInfo GetCurrentChunkInfo(TechControl.ServiceReferenceControllerStistics.SpicStatisticsSession session) {
            return base.Channel.GetCurrentChunkInfo(session);
        }
        
        public System.Threading.Tasks.Task<TechControl.ServiceReferenceControllerStistics.SpicStatisticsChunkInfo> GetCurrentChunkInfoAsync(TechControl.ServiceReferenceControllerStistics.SpicStatisticsSession session) {
            return base.Channel.GetCurrentChunkInfoAsync(session);
        }
        
        public TechControl.ServiceReferenceControllerStistics.SpicStatisticsOperationResult BuildNextChunk(TechControl.ServiceReferenceControllerStistics.SpicStatisticsSession session) {
            return base.Channel.BuildNextChunk(session);
        }
        
        public System.Threading.Tasks.Task<TechControl.ServiceReferenceControllerStistics.SpicStatisticsOperationResult> BuildNextChunkAsync(TechControl.ServiceReferenceControllerStistics.SpicStatisticsSession session) {
            return base.Channel.BuildNextChunkAsync(session);
        }
        
        public TechControl.ServiceReferenceControllerStistics.SpicStatisticsOperationResult StartBuild(TechControl.ServiceReferenceControllerStistics.SpicStatisticsSession session) {
            return base.Channel.StartBuild(session);
        }
        
        public System.Threading.Tasks.Task<TechControl.ServiceReferenceControllerStistics.SpicStatisticsOperationResult> StartBuildAsync(TechControl.ServiceReferenceControllerStistics.SpicStatisticsSession session) {
            return base.Channel.StartBuildAsync(session);
        }
    }
}
