//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TechControl.ServiceReferenceUnitsSpic {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SpicObjectRequest", Namespace="http://schemas.datacontract.org/2004/07/Scout.Plugins.Spic.Server.Infrastructure." +
        "Data")]
    [System.SerializableAttribute()]
    public partial class SpicObjectRequest : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid[] ExtensionIdsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ObjectIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid[] ExtensionIds {
            get {
                return this.ExtensionIdsField;
            }
            set {
                if ((object.ReferenceEquals(this.ExtensionIdsField, value) != true)) {
                    this.ExtensionIdsField = value;
                    this.RaisePropertyChanged("ExtensionIds");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ObjectId {
            get {
                return this.ObjectIdField;
            }
            set {
                if ((this.ObjectIdField.Equals(value) != true)) {
                    this.ObjectIdField = value;
                    this.RaisePropertyChanged("ObjectId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SpicUnit", Namespace="http://schemas.datacontract.org/2004/07/Scout.Plugins.Spic.Server.Units.Data")]
    [System.SerializableAttribute()]
    public partial class SpicUnit : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BrandField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ColorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CompanyIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string GarageNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ModelField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OlsonIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OwnerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PowerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RegistrationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StateNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int UnitIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> UnitTypeIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VinNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string YearField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Brand {
            get {
                return this.BrandField;
            }
            set {
                if ((object.ReferenceEquals(this.BrandField, value) != true)) {
                    this.BrandField = value;
                    this.RaisePropertyChanged("Brand");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Color {
            get {
                return this.ColorField;
            }
            set {
                if ((object.ReferenceEquals(this.ColorField, value) != true)) {
                    this.ColorField = value;
                    this.RaisePropertyChanged("Color");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CompanyId {
            get {
                return this.CompanyIdField;
            }
            set {
                if ((this.CompanyIdField.Equals(value) != true)) {
                    this.CompanyIdField = value;
                    this.RaisePropertyChanged("CompanyId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string GarageNumber {
            get {
                return this.GarageNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.GarageNumberField, value) != true)) {
                    this.GarageNumberField = value;
                    this.RaisePropertyChanged("GarageNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Model {
            get {
                return this.ModelField;
            }
            set {
                if ((object.ReferenceEquals(this.ModelField, value) != true)) {
                    this.ModelField = value;
                    this.RaisePropertyChanged("Model");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OlsonId {
            get {
                return this.OlsonIdField;
            }
            set {
                if ((object.ReferenceEquals(this.OlsonIdField, value) != true)) {
                    this.OlsonIdField = value;
                    this.RaisePropertyChanged("OlsonId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Owner {
            get {
                return this.OwnerField;
            }
            set {
                if ((object.ReferenceEquals(this.OwnerField, value) != true)) {
                    this.OwnerField = value;
                    this.RaisePropertyChanged("Owner");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Power {
            get {
                return this.PowerField;
            }
            set {
                if ((object.ReferenceEquals(this.PowerField, value) != true)) {
                    this.PowerField = value;
                    this.RaisePropertyChanged("Power");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Registration {
            get {
                return this.RegistrationField;
            }
            set {
                if ((object.ReferenceEquals(this.RegistrationField, value) != true)) {
                    this.RegistrationField = value;
                    this.RaisePropertyChanged("Registration");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StateNumber {
            get {
                return this.StateNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.StateNumberField, value) != true)) {
                    this.StateNumberField = value;
                    this.RaisePropertyChanged("StateNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int UnitId {
            get {
                return this.UnitIdField;
            }
            set {
                if ((this.UnitIdField.Equals(value) != true)) {
                    this.UnitIdField = value;
                    this.RaisePropertyChanged("UnitId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> UnitTypeId {
            get {
                return this.UnitTypeIdField;
            }
            set {
                if ((this.UnitTypeIdField.Equals(value) != true)) {
                    this.UnitTypeIdField = value;
                    this.RaisePropertyChanged("UnitTypeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string VinNumber {
            get {
                return this.VinNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.VinNumberField, value) != true)) {
                    this.VinNumberField = value;
                    this.RaisePropertyChanged("VinNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Year {
            get {
                return this.YearField;
            }
            set {
                if ((object.ReferenceEquals(this.YearField, value) != true)) {
                    this.YearField = value;
                    this.RaisePropertyChanged("Year");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SpicUnitCollectionDto", Namespace="http://schemas.datacontract.org/2004/07/Scout.Plugins.Spic.Server.Units.Data")]
    [System.SerializableAttribute()]
    public partial class SpicUnitCollectionDto : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private TechControl.ServiceReferenceUnitsSpic.SpicUnit[] UnitsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TechControl.ServiceReferenceUnitsSpic.SpicUnit[] Units {
            get {
                return this.UnitsField;
            }
            set {
                if ((object.ReferenceEquals(this.UnitsField, value) != true)) {
                    this.UnitsField = value;
                    this.RaisePropertyChanged("Units");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SpicObjectRequests", Namespace="http://schemas.datacontract.org/2004/07/Scout.Plugins.Spic.Server.Infrastructure." +
        "Data")]
    [System.SerializableAttribute()]
    public partial class SpicObjectRequests : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private TechControl.ServiceReferenceUnitsSpic.SpicObjectRequest[] RequestsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TechControl.ServiceReferenceUnitsSpic.SpicObjectRequest[] Requests {
            get {
                return this.RequestsField;
            }
            set {
                if ((object.ReferenceEquals(this.RequestsField, value) != true)) {
                    this.RequestsField = value;
                    this.RaisePropertyChanged("Requests");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SpicObjectsChunkRequest", Namespace="http://schemas.datacontract.org/2004/07/Scout.Plugins.Spic.Server.Infrastructure." +
        "Data")]
    [System.SerializableAttribute()]
    public partial class SpicObjectsChunkRequest : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid[] ExtensionIdsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int OffsetField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Count {
            get {
                return this.CountField;
            }
            set {
                if ((this.CountField.Equals(value) != true)) {
                    this.CountField = value;
                    this.RaisePropertyChanged("Count");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid[] ExtensionIds {
            get {
                return this.ExtensionIdsField;
            }
            set {
                if ((object.ReferenceEquals(this.ExtensionIdsField, value) != true)) {
                    this.ExtensionIdsField = value;
                    this.RaisePropertyChanged("ExtensionIds");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Offset {
            get {
                return this.OffsetField;
            }
            set {
                if ((this.OffsetField.Equals(value) != true)) {
                    this.OffsetField = value;
                    this.RaisePropertyChanged("Offset");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SpicIdObjectsChunkRequest", Namespace="http://schemas.datacontract.org/2004/07/Scout.Plugins.Spic.Server.Units.Data")]
    [System.SerializableAttribute()]
    public partial class SpicIdObjectsChunkRequest : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private TechControl.ServiceReferenceUnitsSpic.SpicObjectsChunkRequest ObjectsChunkRequestField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TechControl.ServiceReferenceUnitsSpic.SpicObjectsChunkRequest ObjectsChunkRequest {
            get {
                return this.ObjectsChunkRequestField;
            }
            set {
                if ((object.ReferenceEquals(this.ObjectsChunkRequestField, value) != true)) {
                    this.ObjectsChunkRequestField = value;
                    this.RaisePropertyChanged("ObjectsChunkRequest");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SpicPetrolTankCollectionDto", Namespace="http://schemas.datacontract.org/2004/07/Scout.Platform.Components.Frontend.Spic.U" +
        "nits.Data")]
    [System.SerializableAttribute()]
    public partial class SpicPetrolTankCollectionDto : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private TechControl.ServiceReferenceUnitsSpic.SpicPetrolTankDto[] SpicPetrolTankDtosField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TechControl.ServiceReferenceUnitsSpic.SpicPetrolTankDto[] SpicPetrolTankDtos {
            get {
                return this.SpicPetrolTankDtosField;
            }
            set {
                if ((object.ReferenceEquals(this.SpicPetrolTankDtosField, value) != true)) {
                    this.SpicPetrolTankDtosField = value;
                    this.RaisePropertyChanged("SpicPetrolTankDtos");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SpicPetrolTankDto", Namespace="http://schemas.datacontract.org/2004/07/Scout.Platform.Components.Frontend.Spic.U" +
        "nits.Data")]
    [System.SerializableAttribute()]
    public partial class SpicPetrolTankDto : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double MaxValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<ushort> SensorPortField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double MaxValue {
            get {
                return this.MaxValueField;
            }
            set {
                if ((this.MaxValueField.Equals(value) != true)) {
                    this.MaxValueField = value;
                    this.RaisePropertyChanged("MaxValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<ushort> SensorPort {
            get {
                return this.SensorPortField;
            }
            set {
                if ((this.SensorPortField.Equals(value) != true)) {
                    this.SensorPortField = value;
                    this.RaisePropertyChanged("SensorPort");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReferenceUnitsSpic.ISpicSoapUnitsService")]
    public interface ISpicSoapUnitsService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISpicSoapUnitsService/GetAllUnitsCount", ReplyAction="http://tempuri.org/ISpicSoapUnitsService/GetAllUnitsCountResponse")]
        int GetAllUnitsCount();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISpicSoapUnitsService/GetAllUnitsCount", ReplyAction="http://tempuri.org/ISpicSoapUnitsService/GetAllUnitsCountResponse")]
        System.Threading.Tasks.Task<int> GetAllUnitsCountAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISpicSoapUnitsService/GetAllUnitsIds", ReplyAction="http://tempuri.org/ISpicSoapUnitsService/GetAllUnitsIdsResponse")]
        int[] GetAllUnitsIds();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISpicSoapUnitsService/GetAllUnitsIds", ReplyAction="http://tempuri.org/ISpicSoapUnitsService/GetAllUnitsIdsResponse")]
        System.Threading.Tasks.Task<int[]> GetAllUnitsIdsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISpicSoapUnitsService/GetUnit", ReplyAction="http://tempuri.org/ISpicSoapUnitsService/GetUnitResponse")]
        TechControl.ServiceReferenceUnitsSpic.SpicUnit GetUnit(TechControl.ServiceReferenceUnitsSpic.SpicObjectRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISpicSoapUnitsService/GetUnit", ReplyAction="http://tempuri.org/ISpicSoapUnitsService/GetUnitResponse")]
        System.Threading.Tasks.Task<TechControl.ServiceReferenceUnitsSpic.SpicUnit> GetUnitAsync(TechControl.ServiceReferenceUnitsSpic.SpicObjectRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISpicSoapUnitsService/GetAllUnits", ReplyAction="http://tempuri.org/ISpicSoapUnitsService/GetAllUnitsResponse")]
        TechControl.ServiceReferenceUnitsSpic.SpicUnitCollectionDto GetAllUnits();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISpicSoapUnitsService/GetAllUnits", ReplyAction="http://tempuri.org/ISpicSoapUnitsService/GetAllUnitsResponse")]
        System.Threading.Tasks.Task<TechControl.ServiceReferenceUnitsSpic.SpicUnitCollectionDto> GetAllUnitsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISpicSoapUnitsService/GetUnits", ReplyAction="http://tempuri.org/ISpicSoapUnitsService/GetUnitsResponse")]
        TechControl.ServiceReferenceUnitsSpic.SpicUnitCollectionDto GetUnits(TechControl.ServiceReferenceUnitsSpic.SpicObjectRequests spicObjectRequests);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISpicSoapUnitsService/GetUnits", ReplyAction="http://tempuri.org/ISpicSoapUnitsService/GetUnitsResponse")]
        System.Threading.Tasks.Task<TechControl.ServiceReferenceUnitsSpic.SpicUnitCollectionDto> GetUnitsAsync(TechControl.ServiceReferenceUnitsSpic.SpicObjectRequests spicObjectRequests);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISpicSoapUnitsService/GetAllUnitsPaged", ReplyAction="http://tempuri.org/ISpicSoapUnitsService/GetAllUnitsPagedResponse")]
        TechControl.ServiceReferenceUnitsSpic.SpicUnitCollectionDto GetAllUnitsPaged(TechControl.ServiceReferenceUnitsSpic.SpicObjectsChunkRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISpicSoapUnitsService/GetAllUnitsPaged", ReplyAction="http://tempuri.org/ISpicSoapUnitsService/GetAllUnitsPagedResponse")]
        System.Threading.Tasks.Task<TechControl.ServiceReferenceUnitsSpic.SpicUnitCollectionDto> GetAllUnitsPagedAsync(TechControl.ServiceReferenceUnitsSpic.SpicObjectsChunkRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISpicSoapUnitsService/GetUnpluggedUnitsCount", ReplyAction="http://tempuri.org/ISpicSoapUnitsService/GetUnpluggedUnitsCountResponse")]
        int GetUnpluggedUnitsCount(int companyId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISpicSoapUnitsService/GetUnpluggedUnitsCount", ReplyAction="http://tempuri.org/ISpicSoapUnitsService/GetUnpluggedUnitsCountResponse")]
        System.Threading.Tasks.Task<int> GetUnpluggedUnitsCountAsync(int companyId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISpicSoapUnitsService/GetUnpluggedUnits", ReplyAction="http://tempuri.org/ISpicSoapUnitsService/GetUnpluggedUnitsResponse")]
        TechControl.ServiceReferenceUnitsSpic.SpicUnitCollectionDto GetUnpluggedUnits(TechControl.ServiceReferenceUnitsSpic.SpicIdObjectsChunkRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISpicSoapUnitsService/GetUnpluggedUnits", ReplyAction="http://tempuri.org/ISpicSoapUnitsService/GetUnpluggedUnitsResponse")]
        System.Threading.Tasks.Task<TechControl.ServiceReferenceUnitsSpic.SpicUnitCollectionDto> GetUnpluggedUnitsAsync(TechControl.ServiceReferenceUnitsSpic.SpicIdObjectsChunkRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISpicSoapUnitsService/GetScopeUnitsCount", ReplyAction="http://tempuri.org/ISpicSoapUnitsService/GetScopeUnitsCountResponse")]
        int GetScopeUnitsCount(int scopeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISpicSoapUnitsService/GetScopeUnitsCount", ReplyAction="http://tempuri.org/ISpicSoapUnitsService/GetScopeUnitsCountResponse")]
        System.Threading.Tasks.Task<int> GetScopeUnitsCountAsync(int scopeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISpicSoapUnitsService/GetScopeUnits", ReplyAction="http://tempuri.org/ISpicSoapUnitsService/GetScopeUnitsResponse")]
        TechControl.ServiceReferenceUnitsSpic.SpicUnitCollectionDto GetScopeUnits(TechControl.ServiceReferenceUnitsSpic.SpicIdObjectsChunkRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISpicSoapUnitsService/GetScopeUnits", ReplyAction="http://tempuri.org/ISpicSoapUnitsService/GetScopeUnitsResponse")]
        System.Threading.Tasks.Task<TechControl.ServiceReferenceUnitsSpic.SpicUnitCollectionDto> GetScopeUnitsAsync(TechControl.ServiceReferenceUnitsSpic.SpicIdObjectsChunkRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISpicSoapUnitsService/GetPositionUnitsCount", ReplyAction="http://tempuri.org/ISpicSoapUnitsService/GetPositionUnitsCountResponse")]
        int GetPositionUnitsCount(int positionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISpicSoapUnitsService/GetPositionUnitsCount", ReplyAction="http://tempuri.org/ISpicSoapUnitsService/GetPositionUnitsCountResponse")]
        System.Threading.Tasks.Task<int> GetPositionUnitsCountAsync(int positionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISpicSoapUnitsService/GetPositionUnits", ReplyAction="http://tempuri.org/ISpicSoapUnitsService/GetPositionUnitsResponse")]
        TechControl.ServiceReferenceUnitsSpic.SpicUnitCollectionDto GetPositionUnits(TechControl.ServiceReferenceUnitsSpic.SpicIdObjectsChunkRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISpicSoapUnitsService/GetPositionUnits", ReplyAction="http://tempuri.org/ISpicSoapUnitsService/GetPositionUnitsResponse")]
        System.Threading.Tasks.Task<TechControl.ServiceReferenceUnitsSpic.SpicUnitCollectionDto> GetPositionUnitsAsync(TechControl.ServiceReferenceUnitsSpic.SpicIdObjectsChunkRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISpicSoapUnitsService/GetAccountUnitsCount", ReplyAction="http://tempuri.org/ISpicSoapUnitsService/GetAccountUnitsCountResponse")]
        int GetAccountUnitsCount(int accountId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISpicSoapUnitsService/GetAccountUnitsCount", ReplyAction="http://tempuri.org/ISpicSoapUnitsService/GetAccountUnitsCountResponse")]
        System.Threading.Tasks.Task<int> GetAccountUnitsCountAsync(int accountId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISpicSoapUnitsService/GetAccountUnits", ReplyAction="http://tempuri.org/ISpicSoapUnitsService/GetAccountUnitsResponse")]
        TechControl.ServiceReferenceUnitsSpic.SpicUnitCollectionDto GetAccountUnits(TechControl.ServiceReferenceUnitsSpic.SpicIdObjectsChunkRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISpicSoapUnitsService/GetAccountUnits", ReplyAction="http://tempuri.org/ISpicSoapUnitsService/GetAccountUnitsResponse")]
        System.Threading.Tasks.Task<TechControl.ServiceReferenceUnitsSpic.SpicUnitCollectionDto> GetAccountUnitsAsync(TechControl.ServiceReferenceUnitsSpic.SpicIdObjectsChunkRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISpicSoapUnitsService/GetPetrolTanksInfo", ReplyAction="http://tempuri.org/ISpicSoapUnitsService/GetPetrolTanksInfoResponse")]
        TechControl.ServiceReferenceUnitsSpic.SpicPetrolTankCollectionDto GetPetrolTanksInfo(TechControl.ServiceReferenceUnitsSpic.SpicObjectRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISpicSoapUnitsService/GetPetrolTanksInfo", ReplyAction="http://tempuri.org/ISpicSoapUnitsService/GetPetrolTanksInfoResponse")]
        System.Threading.Tasks.Task<TechControl.ServiceReferenceUnitsSpic.SpicPetrolTankCollectionDto> GetPetrolTanksInfoAsync(TechControl.ServiceReferenceUnitsSpic.SpicObjectRequest request);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISpicSoapUnitsServiceChannel : TechControl.ServiceReferenceUnitsSpic.ISpicSoapUnitsService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SpicSoapUnitsServiceClient : System.ServiceModel.ClientBase<TechControl.ServiceReferenceUnitsSpic.ISpicSoapUnitsService>, TechControl.ServiceReferenceUnitsSpic.ISpicSoapUnitsService {
        
        public SpicSoapUnitsServiceClient() {
        }
        
        public SpicSoapUnitsServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public SpicSoapUnitsServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SpicSoapUnitsServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SpicSoapUnitsServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int GetAllUnitsCount() {
            return base.Channel.GetAllUnitsCount();
        }
        
        public System.Threading.Tasks.Task<int> GetAllUnitsCountAsync() {
            return base.Channel.GetAllUnitsCountAsync();
        }
        
        public int[] GetAllUnitsIds() {
            return base.Channel.GetAllUnitsIds();
        }
        
        public System.Threading.Tasks.Task<int[]> GetAllUnitsIdsAsync() {
            return base.Channel.GetAllUnitsIdsAsync();
        }
        
        public TechControl.ServiceReferenceUnitsSpic.SpicUnit GetUnit(TechControl.ServiceReferenceUnitsSpic.SpicObjectRequest request) {
            return base.Channel.GetUnit(request);
        }
        
        public System.Threading.Tasks.Task<TechControl.ServiceReferenceUnitsSpic.SpicUnit> GetUnitAsync(TechControl.ServiceReferenceUnitsSpic.SpicObjectRequest request) {
            return base.Channel.GetUnitAsync(request);
        }
        
        public TechControl.ServiceReferenceUnitsSpic.SpicUnitCollectionDto GetAllUnits() {
            return base.Channel.GetAllUnits();
        }
        
        public System.Threading.Tasks.Task<TechControl.ServiceReferenceUnitsSpic.SpicUnitCollectionDto> GetAllUnitsAsync() {
            return base.Channel.GetAllUnitsAsync();
        }
        
        public TechControl.ServiceReferenceUnitsSpic.SpicUnitCollectionDto GetUnits(TechControl.ServiceReferenceUnitsSpic.SpicObjectRequests spicObjectRequests) {
            return base.Channel.GetUnits(spicObjectRequests);
        }
        
        public System.Threading.Tasks.Task<TechControl.ServiceReferenceUnitsSpic.SpicUnitCollectionDto> GetUnitsAsync(TechControl.ServiceReferenceUnitsSpic.SpicObjectRequests spicObjectRequests) {
            return base.Channel.GetUnitsAsync(spicObjectRequests);
        }
        
        public TechControl.ServiceReferenceUnitsSpic.SpicUnitCollectionDto GetAllUnitsPaged(TechControl.ServiceReferenceUnitsSpic.SpicObjectsChunkRequest request) {
            return base.Channel.GetAllUnitsPaged(request);
        }
        
        public System.Threading.Tasks.Task<TechControl.ServiceReferenceUnitsSpic.SpicUnitCollectionDto> GetAllUnitsPagedAsync(TechControl.ServiceReferenceUnitsSpic.SpicObjectsChunkRequest request) {
            return base.Channel.GetAllUnitsPagedAsync(request);
        }
        
        public int GetUnpluggedUnitsCount(int companyId) {
            return base.Channel.GetUnpluggedUnitsCount(companyId);
        }
        
        public System.Threading.Tasks.Task<int> GetUnpluggedUnitsCountAsync(int companyId) {
            return base.Channel.GetUnpluggedUnitsCountAsync(companyId);
        }
        
        public TechControl.ServiceReferenceUnitsSpic.SpicUnitCollectionDto GetUnpluggedUnits(TechControl.ServiceReferenceUnitsSpic.SpicIdObjectsChunkRequest request) {
            return base.Channel.GetUnpluggedUnits(request);
        }
        
        public System.Threading.Tasks.Task<TechControl.ServiceReferenceUnitsSpic.SpicUnitCollectionDto> GetUnpluggedUnitsAsync(TechControl.ServiceReferenceUnitsSpic.SpicIdObjectsChunkRequest request) {
            return base.Channel.GetUnpluggedUnitsAsync(request);
        }
        
        public int GetScopeUnitsCount(int scopeId) {
            return base.Channel.GetScopeUnitsCount(scopeId);
        }
        
        public System.Threading.Tasks.Task<int> GetScopeUnitsCountAsync(int scopeId) {
            return base.Channel.GetScopeUnitsCountAsync(scopeId);
        }
        
        public TechControl.ServiceReferenceUnitsSpic.SpicUnitCollectionDto GetScopeUnits(TechControl.ServiceReferenceUnitsSpic.SpicIdObjectsChunkRequest request) {
            return base.Channel.GetScopeUnits(request);
        }
        
        public System.Threading.Tasks.Task<TechControl.ServiceReferenceUnitsSpic.SpicUnitCollectionDto> GetScopeUnitsAsync(TechControl.ServiceReferenceUnitsSpic.SpicIdObjectsChunkRequest request) {
            return base.Channel.GetScopeUnitsAsync(request);
        }
        
        public int GetPositionUnitsCount(int positionId) {
            return base.Channel.GetPositionUnitsCount(positionId);
        }
        
        public System.Threading.Tasks.Task<int> GetPositionUnitsCountAsync(int positionId) {
            return base.Channel.GetPositionUnitsCountAsync(positionId);
        }
        
        public TechControl.ServiceReferenceUnitsSpic.SpicUnitCollectionDto GetPositionUnits(TechControl.ServiceReferenceUnitsSpic.SpicIdObjectsChunkRequest request) {
            return base.Channel.GetPositionUnits(request);
        }
        
        public System.Threading.Tasks.Task<TechControl.ServiceReferenceUnitsSpic.SpicUnitCollectionDto> GetPositionUnitsAsync(TechControl.ServiceReferenceUnitsSpic.SpicIdObjectsChunkRequest request) {
            return base.Channel.GetPositionUnitsAsync(request);
        }
        
        public int GetAccountUnitsCount(int accountId) {
            return base.Channel.GetAccountUnitsCount(accountId);
        }
        
        public System.Threading.Tasks.Task<int> GetAccountUnitsCountAsync(int accountId) {
            return base.Channel.GetAccountUnitsCountAsync(accountId);
        }
        
        public TechControl.ServiceReferenceUnitsSpic.SpicUnitCollectionDto GetAccountUnits(TechControl.ServiceReferenceUnitsSpic.SpicIdObjectsChunkRequest request) {
            return base.Channel.GetAccountUnits(request);
        }
        
        public System.Threading.Tasks.Task<TechControl.ServiceReferenceUnitsSpic.SpicUnitCollectionDto> GetAccountUnitsAsync(TechControl.ServiceReferenceUnitsSpic.SpicIdObjectsChunkRequest request) {
            return base.Channel.GetAccountUnitsAsync(request);
        }
        
        public TechControl.ServiceReferenceUnitsSpic.SpicPetrolTankCollectionDto GetPetrolTanksInfo(TechControl.ServiceReferenceUnitsSpic.SpicObjectRequest request) {
            return base.Channel.GetPetrolTanksInfo(request);
        }
        
        public System.Threading.Tasks.Task<TechControl.ServiceReferenceUnitsSpic.SpicPetrolTankCollectionDto> GetPetrolTanksInfoAsync(TechControl.ServiceReferenceUnitsSpic.SpicObjectRequest request) {
            return base.Channel.GetPetrolTanksInfoAsync(request);
        }
    }
}
